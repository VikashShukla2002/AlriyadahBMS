@using AlriyadahBMS.Shared.ApiModels
@using AlriyadahBMS.Shared.ViewModels
@inject IDialogService DialogService
@inject NafathService Nafath


<MudPaper Elevation="3" Class="pa-4">


    <MudTextField T="string" @bind-Value="Model.str_Password" Required="true" RequiredError="Password is required!" @ref="passwordMatch" Label=" Password" Variant="Variant.Text" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ButtonPasswordclick" AdornmentAriaLabel="Show Password" />

    <MudTextField T="string" @bind-Value="Model.str_ConfirmPassword" Required="true" RequiredError="Retype password is required!" Validation="@(new Func<string, string>(PasswordMatch))" Label="Retype Password" Variant="Variant.Text" InputType="@RetypePasswordInput" Adornment="Adornment.End" AdornmentIcon="@RetypePasswordInputIcon" OnAdornmentClick="ButtonReTypePasswordclick" AdornmentAriaLabel="Retype Password" />

    <MudTextField T="string" @bind-Value="Model.str_NationalID_Iqama" Label="National ID Iqama" Required="true" RequiredError="National Id Iqama is required" Variant="Variant.Text" />

    @* <MudTextField T="string" Label="Verification Code" Variant="Variant.Text" Disabled="true" /> *@

    @if (!isNationalIdConfirm)
    {
        <div class="d-flex justify-content-between mt-4">
            <MudButton Color="Color.Primary" @onclick="OpenDialog" Variant="Variant.Filled">Verify</MudButton>
            @* <MudButton Color="Color.Primary" Variant="Variant.Filled">Verify Number</MudButton> *@
        </div>
    }


</MudPaper>

@code {

    [Parameter]
    public RegisterModels Model { get; set; } = null!;
    MudForm form;
    MudTextField<string>? passwordMatch;


    [Parameter]
    public EventCallback<bool> NationalIdValid { get; set; }

    InputType PasswordInput = InputType.Password;
    InputType RetypePasswordInput = InputType.Password;
    string RetypePasswordInputIcon = Icons.Material.Filled.VisibilityOff;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    bool isShowPassword;
    bool isShowRetyPassword;
    bool isNationalIdConfirm = false;

    private string PasswordMatch(string arg)
    {
        if (passwordMatch.Value != arg)
            return "Passwords don't match";
        return null;
    }

    void ButtonPasswordclick()
    {
        if (isShowPassword)
        {
            isShowPassword = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShowPassword = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    void ButtonReTypePasswordclick()
    {
        if (isShowRetyPassword)
        {
            isShowRetyPassword = false;
            RetypePasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            RetypePasswordInput = InputType.Password;
        }
        else
        {
            isShowRetyPassword = true;
            RetypePasswordInputIcon = Icons.Material.Filled.Visibility;
            RetypePasswordInput = InputType.Text;
        }
    }
    private async Task OpenDialog()
    {
        var request = new Shared.ApiModels.MFARequest
            {
                NationalIDIqama = Model.str_NationalID_Iqama
            };
        var response = await Nafath.MFARequest(request);
        if (response.Success)
        {
            
        }

        var options = new DialogOptions { CloseOnEscapeKey = true, NoHeader = true };
        var dialogParameter = new DialogParameters();
        dialogParameter.Add("TransId", response.TransId);
        dialogParameter.Add("Random", response.Random);
        dialogParameter.Add("NationalIDIqama", Model.str_NationalID_Iqama);
        var result = DialogService.Show<VerifyNumber>("", dialogParameter, options);
        var myResult = await result.Result;
        if (myResult.Data is MFAResponse response1)
        {
            isNationalIdConfirm = response1.StatusCode == 1;
            await NationalIdValid.InvokeAsync(isNationalIdConfirm);
        }
    }

}