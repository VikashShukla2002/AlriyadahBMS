@if (!userLevelPermissionsList.IsExport()) {
<div>
@if (!userLevelPermissionsList.IsGridAdd && !(userLevelPermissionsList.IsGridEdit && userLevelPermissionsList.ModalGridEdit) && !userLevelPermissionsList.IsMultiEdit) {
@Html.Raw(userLevelPermissionsList.Pager.Render())
}
<div class="ew-list-other-options">
@userLevelPermissionsList.OtherOptions.RenderBody()
</div>
</div>
}
@if (userLevelPermissionsList.ModalGridAdd && userLevelPermissionsList.IsGridAdd || userLevelPermissionsList.ModalGridEdit && userLevelPermissionsList.IsGridEdit || userLevelPermissionsList.ModalMultiEdit && userLevelPermissionsList.IsMultiEdit) {
<script>
var currentTable = @Html.Raw(ConvertToJson(userLevelPermissionsList.ToClientVar()));
ew.deepAssign(ew.vars, { tables: { UserLevelPermissions: currentTable } });
var currentPageID = ew.PAGE_ID = "list";
var currentForm;
var @(userLevelPermissionsList.FormName);
loadjs.ready(["wrapper", "head"], function () {
    let $ = jQuery;
    let fields = currentTable.fields;

    // Form object
    let form = new ew.FormBuilder()
        .setId("@(userLevelPermissionsList.FormName)")
        .setPageId("list")
        .setSubmitWithFetch(@(userLevelPermissionsList.UseAjaxActions ? "true" : "false"))
        .setFormKeyCountName("@(userLevelPermissionsList.FormKeyCountName)")
        .build();
    window[form.id] = form;
    currentForm = form;
    loadjs.done(form.id);
});
</script>
<script>
ew.PREVIEW_SELECTOR = ".ew-preview-btn";
ew.PREVIEW_MODAL_CLASS = "modal modal-fullscreen-sm-down";
ew.PREVIEW_ROW = true;
ew.PREVIEW_SINGLE_ROW = false;
ew.PREVIEW || ew.ready("head", ew.PATH_BASE + "js/preview.min.js?v=20.5.0", "preview");
</script>
}
<form name="@(userLevelPermissionsList.FormName)" id="@(userLevelPermissionsList.FormName)" class="ew-form ew-list-form ew-multi-column-form" action="@AppPath(userLevelPermissionsList.PageName)" method="post" novalidate autocomplete="off">
@if (CurrentPage.CheckToken) {
    <input type="hidden" name="@Config.TokenNameKey" value="@Config.TokenName"><!-- CSRF token name -->
    @Html.AntiForgeryToken()
}
@if (userLevelPermissionsList.IsModal) {
<input type="hidden" name="modal" value="1">
}
<div class="@(userLevelPermissionsList.GetMultiColumnRowClass())">
@if (userLevelPermissionsList.TotalRecords > 0 || userLevelPermissionsList.IsGridEdit || userLevelPermissionsList.IsMultiEdit) {
    await userLevelPermissionsList.SetupGrid();
    bool eof = userLevelPermissionsList.Recordset == null; // DN
while (userLevelPermissionsList.RecordCount < userLevelPermissionsList.StopRecord || SameString(userLevelPermissionsList.RowIndex, "$rowindex$")) { // Begin While
    if (!eof && !SameString(userLevelPermissionsList.RowIndex, "$rowindex$") &&
        (!userLevelPermissionsList.IsGridAdd || userLevelPermissionsList.CurrentMode == "copy") &&
        (!((userLevelPermissionsList.IsCopy || userLevelPermissionsList.IsAdd) && userLevelPermissionsList.RowIndex is int rowIndex && rowIndex == 0))) // DN
        eof = !await userLevelPermissionsList.Recordset.ReadAsync();
    userLevelPermissionsList.RecordCount++;
    if (userLevelPermissionsList.RecordCount >= userLevelPermissionsList.StartRecord) {
        await userLevelPermissionsList.SetupRow();
<div class="@(userLevelPermissionsList.GetMultiColumnColClass())" @Html.Raw(userLevelPermissionsList.RowAttributes)>
<div class="@(userLevelPermissionsList.MultiColumnCardClass)">
    @if (userLevelPermissionsList.MultiColumnListOptionsPosition.StartsWith("top", StringComparison.InvariantCultureIgnoreCase)) {
    <div class="card-header">
        <div class="ew-multi-column-list-option ew-@(userLevelPermissionsList.MultiColumnListOptionsPosition)">
@{
    // Render list options (body, bottom)
    userLevelPermissionsList.ListOptions.Tag = "div";
    userLevelPermissionsList.ListOptions.RenderBody(userLevelPermissionsList.MultiColumnListOptionsPosition, userLevelPermissionsList.RowCount);
}
        </div><!-- /.ew-multi-column-list-option -->
    </div>
    }
    <div class="card-body">
    @if (userLevelPermissionsList.UserLevelID.Visible) { // userLevelPermissionsList.UserLevelID.Visible (begin)
        if (userLevelPermissionsList.RowType == RowType.View) { // View record
        <div class="row UserLevelPermissions_UserLevelID">
            <div class="col col-sm-4 UserLevelPermissions_UserLevelID">@Html.Raw(userLevelPermissionsList.RenderFieldHeader(userLevelPermissionsList.UserLevelID))</div>
            <div class="col col-sm-8"><div @Html.Raw(userLevelPermissionsList.UserLevelID.CellAttributes)>
<span @Html.Raw(userLevelPermissionsList.UserLevelID.ViewAttributes)>
@Html.Raw(userLevelPermissionsList.UserLevelID.GetViewValue())</span>
</div></div>
        </div>
        } else { // Add/edit record
        <div class="row UserLevelPermissions_UserLevelID">
            <label class="@(userLevelPermissionsList.LeftColumnClass)">@Html.Raw(userLevelPermissionsList.UserLevelID.Caption)</label>
            <div class="@(userLevelPermissionsList.RightColumnClass)"><div @Html.Raw(userLevelPermissionsList.UserLevelID.CellAttributes)>
<span @Html.Raw(userLevelPermissionsList.UserLevelID.ViewAttributes)>
@Html.Raw(userLevelPermissionsList.UserLevelID.GetViewValue())</span>
</div></div>
        </div>
        }
    }
    @if (userLevelPermissionsList._TableName.Visible) { // userLevelPermissionsList._TableName.Visible (begin)
        if (userLevelPermissionsList.RowType == RowType.View) { // View record
        <div class="row UserLevelPermissions__TableName">
            <div class="col col-sm-4 UserLevelPermissions__TableName">@Html.Raw(userLevelPermissionsList.RenderFieldHeader(userLevelPermissionsList._TableName))</div>
            <div class="col col-sm-8"><div @Html.Raw(userLevelPermissionsList._TableName.CellAttributes)>
<span @Html.Raw(userLevelPermissionsList._TableName.ViewAttributes)>
@Html.Raw(userLevelPermissionsList._TableName.GetViewValue())</span>
</div></div>
        </div>
        } else { // Add/edit record
        <div class="row UserLevelPermissions__TableName">
            <label class="@(userLevelPermissionsList.LeftColumnClass)">@Html.Raw(userLevelPermissionsList._TableName.Caption)</label>
            <div class="@(userLevelPermissionsList.RightColumnClass)"><div @Html.Raw(userLevelPermissionsList._TableName.CellAttributes)>
<span @Html.Raw(userLevelPermissionsList._TableName.ViewAttributes)>
@Html.Raw(userLevelPermissionsList._TableName.GetViewValue())</span>
</div></div>
        </div>
        }
    }
    @if (userLevelPermissionsList.Permission.Visible) { // userLevelPermissionsList.Permission.Visible (begin)
        if (userLevelPermissionsList.RowType == RowType.View) { // View record
        <div class="row UserLevelPermissions_Permission">
            <div class="col col-sm-4 UserLevelPermissions_Permission">@Html.Raw(userLevelPermissionsList.RenderFieldHeader(userLevelPermissionsList.Permission))</div>
            <div class="col col-sm-8"><div @Html.Raw(userLevelPermissionsList.Permission.CellAttributes)>
<span @Html.Raw(userLevelPermissionsList.Permission.ViewAttributes)>
@Html.Raw(userLevelPermissionsList.Permission.GetViewValue())</span>
</div></div>
        </div>
        } else { // Add/edit record
        <div class="row UserLevelPermissions_Permission">
            <label class="@(userLevelPermissionsList.LeftColumnClass)">@Html.Raw(userLevelPermissionsList.Permission.Caption)</label>
            <div class="@(userLevelPermissionsList.RightColumnClass)"><div @Html.Raw(userLevelPermissionsList.Permission.CellAttributes)>
<span @Html.Raw(userLevelPermissionsList.Permission.ViewAttributes)>
@Html.Raw(userLevelPermissionsList.Permission.GetViewValue())</span>
</div></div>
        </div>
        }
    }
    </div><!-- /.card-body -->
@if (!userLevelPermissionsList.IsExport()) {
    if (userLevelPermissionsList.MultiColumnListOptionsPosition.StartsWith("bottom", StringComparison.InvariantCultureIgnoreCase)) {
    <div class="card-footer">
        <div class="ew-multi-column-list-option ew-@(userLevelPermissionsList.MultiColumnListOptionsPosition)">
@{
    // Render list options (body, bottom)
    userLevelPermissionsList.ListOptions.Tag = "div";
}
@userLevelPermissionsList.ListOptions.RenderBody(userLevelPermissionsList.MultiColumnListOptionsPosition, userLevelPermissionsList.RowCount)
        </div><!-- /.ew-multi-column-list-option -->
    </div><!-- /.card-footer -->
    }
}
</div><!-- /.card -->
</div><!-- /.col-* -->
    } @* End if *@

    // Reset for template row
    if (SameString(userLevelPermissionsList.RowIndex, "$rowindex$"))
        userLevelPermissionsList.RowIndex = 0;

    // Reset inline add/copy row
    if ((userLevelPermissionsList.IsCopy || userLevelPermissionsList.IsAdd) && userLevelPermissionsList.RowIndex is int rowIndex2 && rowIndex2 == 0)
        userLevelPermissionsList.RowIndex = 1;
} @* End While *@
} @* userLevelPermissionsList.TotalRecords > 0 (end) *@
</div><!-- /.ew-multi-column-row -->
@if (Empty(userLevelPermissionsList.CurrentAction) && !userLevelPermissionsList.UseAjaxActions) {
<input type="hidden" name="action" id="action" value="">
}
</form><!-- /.ew-list-form -->
@{ userLevelPermissionsList.CloseRecordset(); }
