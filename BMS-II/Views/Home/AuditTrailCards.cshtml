@if (!auditTrailList.IsExport()) {
<div>
@if (!auditTrailList.IsGridAdd && !(auditTrailList.IsGridEdit && auditTrailList.ModalGridEdit) && !auditTrailList.IsMultiEdit) {
@Html.Raw(auditTrailList.Pager.Render())
}
<div class="ew-list-other-options">
@auditTrailList.OtherOptions.RenderBody()
</div>
</div>
}
@if (auditTrailList.ModalGridAdd && auditTrailList.IsGridAdd || auditTrailList.ModalGridEdit && auditTrailList.IsGridEdit || auditTrailList.ModalMultiEdit && auditTrailList.IsMultiEdit) {
<script>
var currentTable = @Html.Raw(ConvertToJson(auditTrailList.ToClientVar()));
ew.deepAssign(ew.vars, { tables: { AuditTrail: currentTable } });
var currentPageID = ew.PAGE_ID = "list";
var currentForm;
var @(auditTrailList.FormName);
loadjs.ready(["wrapper", "head"], function () {
    let $ = jQuery;
    let fields = currentTable.fields;

    // Form object
    let form = new ew.FormBuilder()
        .setId("@(auditTrailList.FormName)")
        .setPageId("list")
        .setSubmitWithFetch(@(auditTrailList.UseAjaxActions ? "true" : "false"))
        .setFormKeyCountName("@(auditTrailList.FormKeyCountName)")
        .build();
    window[form.id] = form;
    currentForm = form;
    loadjs.done(form.id);
});
</script>
<script>
ew.PREVIEW_SELECTOR = ".ew-preview-btn";
ew.PREVIEW_MODAL_CLASS = "modal modal-fullscreen-sm-down";
ew.PREVIEW_ROW = true;
ew.PREVIEW_SINGLE_ROW = false;
ew.PREVIEW || ew.ready("head", ew.PATH_BASE + "js/preview.min.js?v=20.5.0", "preview");
</script>
}
<form name="@(auditTrailList.FormName)" id="@(auditTrailList.FormName)" class="ew-form ew-list-form ew-multi-column-form" action="@AppPath(auditTrailList.PageName)" method="post" novalidate autocomplete="off">
@if (CurrentPage.CheckToken) {
    <input type="hidden" name="@Config.TokenNameKey" value="@Config.TokenName"><!-- CSRF token name -->
    @Html.AntiForgeryToken()
}
@if (auditTrailList.IsModal) {
<input type="hidden" name="modal" value="1">
}
<div class="@(auditTrailList.GetMultiColumnRowClass())">
@if (auditTrailList.TotalRecords > 0 || auditTrailList.IsGridEdit || auditTrailList.IsMultiEdit) {
    await auditTrailList.SetupGrid();
    bool eof = auditTrailList.Recordset == null; // DN
while (auditTrailList.RecordCount < auditTrailList.StopRecord || SameString(auditTrailList.RowIndex, "$rowindex$")) { // Begin While
    if (!eof && !SameString(auditTrailList.RowIndex, "$rowindex$") &&
        (!auditTrailList.IsGridAdd || auditTrailList.CurrentMode == "copy") &&
        (!((auditTrailList.IsCopy || auditTrailList.IsAdd) && auditTrailList.RowIndex is int rowIndex && rowIndex == 0))) // DN
        eof = !await auditTrailList.Recordset.ReadAsync();
    auditTrailList.RecordCount++;
    if (auditTrailList.RecordCount >= auditTrailList.StartRecord) {
        await auditTrailList.SetupRow();
<div class="@(auditTrailList.GetMultiColumnColClass())" @Html.Raw(auditTrailList.RowAttributes)>
<div class="@(auditTrailList.MultiColumnCardClass)">
    @if (auditTrailList.MultiColumnListOptionsPosition.StartsWith("top", StringComparison.InvariantCultureIgnoreCase)) {
    <div class="card-header">
        <div class="ew-multi-column-list-option ew-@(auditTrailList.MultiColumnListOptionsPosition)">
@{
    // Render list options (body, bottom)
    auditTrailList.ListOptions.Tag = "div";
    auditTrailList.ListOptions.RenderBody(auditTrailList.MultiColumnListOptionsPosition, auditTrailList.RowCount);
}
        </div><!-- /.ew-multi-column-list-option -->
    </div>
    }
    <div class="card-body">
    @if (auditTrailList.Id.Visible) { // auditTrailList.Id.Visible (begin)
        if (auditTrailList.RowType == RowType.View) { // View record
        <div class="row AuditTrail_Id">
            <div class="col col-sm-4 AuditTrail_Id">@Html.Raw(auditTrailList.RenderFieldHeader(auditTrailList.Id))</div>
            <div class="col col-sm-8"><div @Html.Raw(auditTrailList.Id.CellAttributes)>
<span @Html.Raw(auditTrailList.Id.ViewAttributes)>
@Html.Raw(auditTrailList.Id.GetViewValue())</span>
</div></div>
        </div>
        } else { // Add/edit record
        <div class="row AuditTrail_Id">
            <label class="@(auditTrailList.LeftColumnClass)">@Html.Raw(auditTrailList.Id.Caption)</label>
            <div class="@(auditTrailList.RightColumnClass)"><div @Html.Raw(auditTrailList.Id.CellAttributes)>
<span @Html.Raw(auditTrailList.Id.ViewAttributes)>
@Html.Raw(auditTrailList.Id.GetViewValue())</span>
</div></div>
        </div>
        }
    }
    @if (auditTrailList._DateTime.Visible) { // auditTrailList._DateTime.Visible (begin)
        if (auditTrailList.RowType == RowType.View) { // View record
        <div class="row AuditTrail__DateTime">
            <div class="col col-sm-4 AuditTrail__DateTime">@Html.Raw(auditTrailList.RenderFieldHeader(auditTrailList._DateTime))</div>
            <div class="col col-sm-8"><div @Html.Raw(auditTrailList._DateTime.CellAttributes)>
<span @Html.Raw(auditTrailList._DateTime.ViewAttributes)>
@Html.Raw(auditTrailList._DateTime.GetViewValue())</span>
</div></div>
        </div>
        } else { // Add/edit record
        <div class="row AuditTrail__DateTime">
            <label class="@(auditTrailList.LeftColumnClass)">@Html.Raw(auditTrailList._DateTime.Caption)</label>
            <div class="@(auditTrailList.RightColumnClass)"><div @Html.Raw(auditTrailList._DateTime.CellAttributes)>
<span @Html.Raw(auditTrailList._DateTime.ViewAttributes)>
@Html.Raw(auditTrailList._DateTime.GetViewValue())</span>
</div></div>
        </div>
        }
    }
    @if (auditTrailList.Script.Visible) { // auditTrailList.Script.Visible (begin)
        if (auditTrailList.RowType == RowType.View) { // View record
        <div class="row AuditTrail_Script">
            <div class="col col-sm-4 AuditTrail_Script">@Html.Raw(auditTrailList.RenderFieldHeader(auditTrailList.Script))</div>
            <div class="col col-sm-8"><div @Html.Raw(auditTrailList.Script.CellAttributes)>
<span @Html.Raw(auditTrailList.Script.ViewAttributes)>
@Html.Raw(auditTrailList.Script.GetViewValue())</span>
</div></div>
        </div>
        } else { // Add/edit record
        <div class="row AuditTrail_Script">
            <label class="@(auditTrailList.LeftColumnClass)">@Html.Raw(auditTrailList.Script.Caption)</label>
            <div class="@(auditTrailList.RightColumnClass)"><div @Html.Raw(auditTrailList.Script.CellAttributes)>
<span @Html.Raw(auditTrailList.Script.ViewAttributes)>
@Html.Raw(auditTrailList.Script.GetViewValue())</span>
</div></div>
        </div>
        }
    }
    @if (auditTrailList._User.Visible) { // auditTrailList._User.Visible (begin)
        if (auditTrailList.RowType == RowType.View) { // View record
        <div class="row AuditTrail__User">
            <div class="col col-sm-4 AuditTrail__User">@Html.Raw(auditTrailList.RenderFieldHeader(auditTrailList._User))</div>
            <div class="col col-sm-8"><div @Html.Raw(auditTrailList._User.CellAttributes)>
<span @Html.Raw(auditTrailList._User.ViewAttributes)>
@Html.Raw(auditTrailList._User.GetViewValue())</span>
</div></div>
        </div>
        } else { // Add/edit record
        <div class="row AuditTrail__User">
            <label class="@(auditTrailList.LeftColumnClass)">@Html.Raw(auditTrailList._User.Caption)</label>
            <div class="@(auditTrailList.RightColumnClass)"><div @Html.Raw(auditTrailList._User.CellAttributes)>
<span @Html.Raw(auditTrailList._User.ViewAttributes)>
@Html.Raw(auditTrailList._User.GetViewValue())</span>
</div></div>
        </div>
        }
    }
    @if (auditTrailList._Action.Visible) { // auditTrailList._Action.Visible (begin)
        if (auditTrailList.RowType == RowType.View) { // View record
        <div class="row AuditTrail__Action">
            <div class="col col-sm-4 AuditTrail__Action">@Html.Raw(auditTrailList.RenderFieldHeader(auditTrailList._Action))</div>
            <div class="col col-sm-8"><div @Html.Raw(auditTrailList._Action.CellAttributes)>
<span @Html.Raw(auditTrailList._Action.ViewAttributes)>
@Html.Raw(auditTrailList._Action.GetViewValue())</span>
</div></div>
        </div>
        } else { // Add/edit record
        <div class="row AuditTrail__Action">
            <label class="@(auditTrailList.LeftColumnClass)">@Html.Raw(auditTrailList._Action.Caption)</label>
            <div class="@(auditTrailList.RightColumnClass)"><div @Html.Raw(auditTrailList._Action.CellAttributes)>
<span @Html.Raw(auditTrailList._Action.ViewAttributes)>
@Html.Raw(auditTrailList._Action.GetViewValue())</span>
</div></div>
        </div>
        }
    }
    @if (auditTrailList._Table.Visible) { // auditTrailList._Table.Visible (begin)
        if (auditTrailList.RowType == RowType.View) { // View record
        <div class="row AuditTrail__Table">
            <div class="col col-sm-4 AuditTrail__Table">@Html.Raw(auditTrailList.RenderFieldHeader(auditTrailList._Table))</div>
            <div class="col col-sm-8"><div @Html.Raw(auditTrailList._Table.CellAttributes)>
<span @Html.Raw(auditTrailList._Table.ViewAttributes)>
@Html.Raw(auditTrailList._Table.GetViewValue())</span>
</div></div>
        </div>
        } else { // Add/edit record
        <div class="row AuditTrail__Table">
            <label class="@(auditTrailList.LeftColumnClass)">@Html.Raw(auditTrailList._Table.Caption)</label>
            <div class="@(auditTrailList.RightColumnClass)"><div @Html.Raw(auditTrailList._Table.CellAttributes)>
<span @Html.Raw(auditTrailList._Table.ViewAttributes)>
@Html.Raw(auditTrailList._Table.GetViewValue())</span>
</div></div>
        </div>
        }
    }
    @if (auditTrailList._Field.Visible) { // auditTrailList._Field.Visible (begin)
        if (auditTrailList.RowType == RowType.View) { // View record
        <div class="row AuditTrail__Field">
            <div class="col col-sm-4 AuditTrail__Field">@Html.Raw(auditTrailList.RenderFieldHeader(auditTrailList._Field))</div>
            <div class="col col-sm-8"><div @Html.Raw(auditTrailList._Field.CellAttributes)>
<span @Html.Raw(auditTrailList._Field.ViewAttributes)>
@Html.Raw(auditTrailList._Field.GetViewValue())</span>
</div></div>
        </div>
        } else { // Add/edit record
        <div class="row AuditTrail__Field">
            <label class="@(auditTrailList.LeftColumnClass)">@Html.Raw(auditTrailList._Field.Caption)</label>
            <div class="@(auditTrailList.RightColumnClass)"><div @Html.Raw(auditTrailList._Field.CellAttributes)>
<span @Html.Raw(auditTrailList._Field.ViewAttributes)>
@Html.Raw(auditTrailList._Field.GetViewValue())</span>
</div></div>
        </div>
        }
    }
    </div><!-- /.card-body -->
@if (!auditTrailList.IsExport()) {
    if (auditTrailList.MultiColumnListOptionsPosition.StartsWith("bottom", StringComparison.InvariantCultureIgnoreCase)) {
    <div class="card-footer">
        <div class="ew-multi-column-list-option ew-@(auditTrailList.MultiColumnListOptionsPosition)">
@{
    // Render list options (body, bottom)
    auditTrailList.ListOptions.Tag = "div";
}
@auditTrailList.ListOptions.RenderBody(auditTrailList.MultiColumnListOptionsPosition, auditTrailList.RowCount)
        </div><!-- /.ew-multi-column-list-option -->
    </div><!-- /.card-footer -->
    }
}
</div><!-- /.card -->
</div><!-- /.col-* -->
    } @* End if *@

    // Reset for template row
    if (SameString(auditTrailList.RowIndex, "$rowindex$"))
        auditTrailList.RowIndex = 0;

    // Reset inline add/copy row
    if ((auditTrailList.IsCopy || auditTrailList.IsAdd) && auditTrailList.RowIndex is int rowIndex2 && rowIndex2 == 0)
        auditTrailList.RowIndex = 1;
} @* End While *@
} @* auditTrailList.TotalRecords > 0 (end) *@
</div><!-- /.ew-multi-column-row -->
@if (Empty(auditTrailList.CurrentAction) && !auditTrailList.UseAjaxActions) {
<input type="hidden" name="action" id="action" value="">
}
</form><!-- /.ew-list-form -->
@{ auditTrailList.CloseRecordset(); }
