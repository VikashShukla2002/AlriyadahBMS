@if (!tblEvaluationList.IsExport()) {
<div>
@if (!tblEvaluationList.IsGridAdd && !(tblEvaluationList.IsGridEdit && tblEvaluationList.ModalGridEdit) && !tblEvaluationList.IsMultiEdit) {
@Html.Raw(tblEvaluationList.Pager.Render())
}
<div class="ew-list-other-options">
@tblEvaluationList.OtherOptions.RenderBody()
</div>
</div>
}
@if (tblEvaluationList.ModalGridAdd && tblEvaluationList.IsGridAdd || tblEvaluationList.ModalGridEdit && tblEvaluationList.IsGridEdit || tblEvaluationList.ModalMultiEdit && tblEvaluationList.IsMultiEdit) {
<script>
var currentTable = @Html.Raw(ConvertToJson(tblEvaluationList.ToClientVar()));
ew.deepAssign(ew.vars, { tables: { tblEvaluation: currentTable } });
var currentPageID = ew.PAGE_ID = "list";
var currentForm;
var @(tblEvaluationList.FormName);
loadjs.ready(["wrapper", "head"], function () {
    let $ = jQuery;
    let fields = currentTable.fields;

    // Form object
    let form = new ew.FormBuilder()
        .setId("@(tblEvaluationList.FormName)")
        .setPageId("list")
        .setSubmitWithFetch(@(tblEvaluationList.UseAjaxActions ? "true" : "false"))
        .setFormKeyCountName("@(tblEvaluationList.FormKeyCountName)")
        .build();
    window[form.id] = form;
    currentForm = form;
    loadjs.done(form.id);
});
</script>
<script>
ew.PREVIEW_SELECTOR = ".ew-preview-btn";
ew.PREVIEW_MODAL_CLASS = "modal modal-fullscreen-sm-down";
ew.PREVIEW_ROW = true;
ew.PREVIEW_SINGLE_ROW = false;
ew.PREVIEW || ew.ready("head", ew.PATH_BASE + "js/preview.min.js?v=20.5.0", "preview");
</script>
}
<form name="@(tblEvaluationList.FormName)" id="@(tblEvaluationList.FormName)" class="ew-form ew-list-form ew-multi-column-form" action="@AppPath(tblEvaluationList.PageName)" method="post" novalidate autocomplete="off">
@if (CurrentPage.CheckToken) {
    <input type="hidden" name="@Config.TokenNameKey" value="@Config.TokenName"><!-- CSRF token name -->
    @Html.AntiForgeryToken()
}
@if (tblEvaluationList.IsModal) {
<input type="hidden" name="modal" value="1">
}
@if (tblEvaluationList.CurrentMasterTable == "tblAssessment" && !Empty(tblEvaluationList.CurrentAction)) {
<input type="hidden" name="@(Config.TableShowMaster)" value="tblAssessment">
<input type="hidden" name="fk_AssessmentID" value="@(HtmlEncode(tblEvaluationList.AssessmentID.SessionValue))">
}
<div class="@(tblEvaluationList.GetMultiColumnRowClass())">
@if (tblEvaluationList.TotalRecords > 0 || tblEvaluationList.IsGridEdit || tblEvaluationList.IsMultiEdit) {
    await tblEvaluationList.SetupGrid();
    bool eof = tblEvaluationList.Recordset == null; // DN
while (tblEvaluationList.RecordCount < tblEvaluationList.StopRecord || SameString(tblEvaluationList.RowIndex, "$rowindex$")) { // Begin While
    if (!eof && !SameString(tblEvaluationList.RowIndex, "$rowindex$") &&
        (!tblEvaluationList.IsGridAdd || tblEvaluationList.CurrentMode == "copy") &&
        (!((tblEvaluationList.IsCopy || tblEvaluationList.IsAdd) && tblEvaluationList.RowIndex is int rowIndex && rowIndex == 0))) // DN
        eof = !await tblEvaluationList.Recordset.ReadAsync();
    tblEvaluationList.RecordCount++;
    if (tblEvaluationList.RecordCount >= tblEvaluationList.StartRecord) {
        await tblEvaluationList.SetupRow();
<div class="@(tblEvaluationList.GetMultiColumnColClass())" @Html.Raw(tblEvaluationList.RowAttributes)>
<div class="@(tblEvaluationList.MultiColumnCardClass)">
    @if (tblEvaluationList.MultiColumnListOptionsPosition.StartsWith("top", StringComparison.InvariantCultureIgnoreCase)) {
    <div class="card-header">
        <div class="ew-multi-column-list-option ew-@(tblEvaluationList.MultiColumnListOptionsPosition)">
@{
    // Render list options (body, bottom)
    tblEvaluationList.ListOptions.Tag = "div";
    tblEvaluationList.ListOptions.RenderBody(tblEvaluationList.MultiColumnListOptionsPosition, tblEvaluationList.RowCount);
}
        </div><!-- /.ew-multi-column-list-option -->
    </div>
    }
    <div class="card-body">
    @if (tblEvaluationList.str_Full_Name_Hdr.Visible) { // tblEvaluationList.str_Full_Name_Hdr.Visible (begin)
        if (tblEvaluationList.RowType == RowType.View) { // View record
        <div class="row tblEvaluation_str_Full_Name_Hdr">
            <div class="col col-sm-4 tblEvaluation_str_Full_Name_Hdr" style="white-space: nowrap;">@Html.Raw(tblEvaluationList.RenderFieldHeader(tblEvaluationList.str_Full_Name_Hdr))</div>
            <div class="col col-sm-8"><div @Html.Raw(tblEvaluationList.str_Full_Name_Hdr.CellAttributes)>
<span @Html.Raw(tblEvaluationList.str_Full_Name_Hdr.ViewAttributes)>
@Html.Raw(tblEvaluationList.str_Full_Name_Hdr.GetViewValue())</span>
</div></div>
        </div>
        } else { // Add/edit record
        <div class="row tblEvaluation_str_Full_Name_Hdr">
            <label class="@(tblEvaluationList.LeftColumnClass)">@Html.Raw(tblEvaluationList.str_Full_Name_Hdr.Caption)</label>
            <div class="@(tblEvaluationList.RightColumnClass)"><div @Html.Raw(tblEvaluationList.str_Full_Name_Hdr.CellAttributes)>
<span @Html.Raw(tblEvaluationList.str_Full_Name_Hdr.ViewAttributes)>
@Html.Raw(tblEvaluationList.str_Full_Name_Hdr.GetViewValue())</span>
</div></div>
        </div>
        }
    }
    @if (tblEvaluationList.NationalID.Visible) { // tblEvaluationList.NationalID.Visible (begin)
        if (tblEvaluationList.RowType == RowType.View) { // View record
        <div class="row tblEvaluation_NationalID">
            <div class="col col-sm-4 tblEvaluation_NationalID" style="white-space: nowrap;">@Html.Raw(tblEvaluationList.RenderFieldHeader(tblEvaluationList.NationalID))</div>
            <div class="col col-sm-8"><div @Html.Raw(tblEvaluationList.NationalID.CellAttributes)>
<span @Html.Raw(tblEvaluationList.NationalID.ViewAttributes)>
@Html.Raw(tblEvaluationList.NationalID.GetViewValue())</span>
</div></div>
        </div>
        } else { // Add/edit record
        <div class="row tblEvaluation_NationalID">
            <label class="@(tblEvaluationList.LeftColumnClass)">@Html.Raw(tblEvaluationList.NationalID.Caption)</label>
            <div class="@(tblEvaluationList.RightColumnClass)"><div @Html.Raw(tblEvaluationList.NationalID.CellAttributes)>
<span @Html.Raw(tblEvaluationList.NationalID.ViewAttributes)>
@Html.Raw(tblEvaluationList.NationalID.GetViewValue())</span>
</div></div>
        </div>
        }
    }
    @if (tblEvaluationList.str_Cell_Phone.Visible) { // tblEvaluationList.str_Cell_Phone.Visible (begin)
        if (tblEvaluationList.RowType == RowType.View) { // View record
        <div class="row tblEvaluation_str_Cell_Phone">
            <div class="col col-sm-4 tblEvaluation_str_Cell_Phone">@Html.Raw(tblEvaluationList.RenderFieldHeader(tblEvaluationList.str_Cell_Phone))</div>
            <div class="col col-sm-8"><div @Html.Raw(tblEvaluationList.str_Cell_Phone.CellAttributes)>
<span @Html.Raw(tblEvaluationList.str_Cell_Phone.ViewAttributes)>
@Html.Raw(tblEvaluationList.str_Cell_Phone.GetViewValue())</span>
</div></div>
        </div>
        } else { // Add/edit record
        <div class="row tblEvaluation_str_Cell_Phone">
            <label class="@(tblEvaluationList.LeftColumnClass)">@Html.Raw(tblEvaluationList.str_Cell_Phone.Caption)</label>
            <div class="@(tblEvaluationList.RightColumnClass)"><div @Html.Raw(tblEvaluationList.str_Cell_Phone.CellAttributes)>
<span @Html.Raw(tblEvaluationList.str_Cell_Phone.ViewAttributes)>
@Html.Raw(tblEvaluationList.str_Cell_Phone.GetViewValue())</span>
</div></div>
        </div>
        }
    }
    @if (tblEvaluationList.Retake.Visible) { // tblEvaluationList.Retake.Visible (begin)
        if (tblEvaluationList.RowType == RowType.View) { // View record
        <div class="row tblEvaluation_Retake">
            <div class="col col-sm-4 tblEvaluation_Retake">@Html.Raw(tblEvaluationList.RenderFieldHeader(tblEvaluationList.Retake))</div>
            <div class="col col-sm-8"><div @Html.Raw(tblEvaluationList.Retake.CellAttributes)>
<span @Html.Raw(tblEvaluationList.Retake.ViewAttributes)>
<div class="form-check d-inline-block">
    <input type="checkbox" id="x_Retake_@(tblEvaluationList.RowCount)" class="form-check-input" value="@(tblEvaluationList.Retake.GetViewValue())" disabled checked="@(ConvertToBool(tblEvaluationList.Retake.CurrentValue))">
    <label class="form-check-label" for="x_Retake_@(tblEvaluationList.RowCount)"></label>
</div></span>
</div></div>
        </div>
        } else { // Add/edit record
        <div class="row tblEvaluation_Retake">
            <label class="@(tblEvaluationList.LeftColumnClass)">@Html.Raw(tblEvaluationList.Retake.Caption)</label>
            <div class="@(tblEvaluationList.RightColumnClass)"><div @Html.Raw(tblEvaluationList.Retake.CellAttributes)>
<span @Html.Raw(tblEvaluationList.Retake.ViewAttributes)>
<div class="form-check d-inline-block">
    <input type="checkbox" id="x_Retake_@(tblEvaluationList.RowCount)" class="form-check-input" value="@(tblEvaluationList.Retake.GetViewValue())" disabled checked="@(ConvertToBool(tblEvaluationList.Retake.CurrentValue))">
    <label class="form-check-label" for="x_Retake_@(tblEvaluationList.RowCount)"></label>
</div></span>
</div></div>
        </div>
        }
    }
    @if (tblEvaluationList.AbsherApptNbr.Visible) { // tblEvaluationList.AbsherApptNbr.Visible (begin)
        if (tblEvaluationList.RowType == RowType.View) { // View record
        <div class="row tblEvaluation_AbsherApptNbr">
            <div class="col col-sm-4 tblEvaluation_AbsherApptNbr">@Html.Raw(tblEvaluationList.RenderFieldHeader(tblEvaluationList.AbsherApptNbr))</div>
            <div class="col col-sm-8"><div @Html.Raw(tblEvaluationList.AbsherApptNbr.CellAttributes)>
<span @Html.Raw(tblEvaluationList.AbsherApptNbr.ViewAttributes)>
@Html.Raw(tblEvaluationList.AbsherApptNbr.GetViewValue())</span>
</div></div>
        </div>
        } else { // Add/edit record
        <div class="row tblEvaluation_AbsherApptNbr">
            <label class="@(tblEvaluationList.LeftColumnClass)">@Html.Raw(tblEvaluationList.AbsherApptNbr.Caption)</label>
            <div class="@(tblEvaluationList.RightColumnClass)"><div @Html.Raw(tblEvaluationList.AbsherApptNbr.CellAttributes)>
<span @Html.Raw(tblEvaluationList.AbsherApptNbr.ViewAttributes)>
@Html.Raw(tblEvaluationList.AbsherApptNbr.GetViewValue())</span>
</div></div>
        </div>
        }
    }
    @if (tblEvaluationList.IsDrivingexperience.Visible) { // tblEvaluationList.IsDrivingexperience.Visible (begin)
        if (tblEvaluationList.RowType == RowType.View) { // View record
        <div class="row tblEvaluation_IsDrivingexperience">
            <div class="col col-sm-4 tblEvaluation_IsDrivingexperience">@Html.Raw(tblEvaluationList.RenderFieldHeader(tblEvaluationList.IsDrivingexperience))</div>
            <div class="col col-sm-8"><div @Html.Raw(tblEvaluationList.IsDrivingexperience.CellAttributes)>
<span @Html.Raw(tblEvaluationList.IsDrivingexperience.ViewAttributes)>
<div class="form-check d-inline-block">
    <input type="checkbox" id="x_IsDrivingexperience_@(tblEvaluationList.RowCount)" class="form-check-input" value="@(tblEvaluationList.IsDrivingexperience.GetViewValue())" disabled checked="@(ConvertToBool(tblEvaluationList.IsDrivingexperience.CurrentValue))">
    <label class="form-check-label" for="x_IsDrivingexperience_@(tblEvaluationList.RowCount)"></label>
</div></span>
</div></div>
        </div>
        } else { // Add/edit record
        <div class="row tblEvaluation_IsDrivingexperience">
            <label class="@(tblEvaluationList.LeftColumnClass)">@Html.Raw(tblEvaluationList.IsDrivingexperience.Caption)</label>
            <div class="@(tblEvaluationList.RightColumnClass)"><div @Html.Raw(tblEvaluationList.IsDrivingexperience.CellAttributes)>
<span @Html.Raw(tblEvaluationList.IsDrivingexperience.ViewAttributes)>
<div class="form-check d-inline-block">
    <input type="checkbox" id="x_IsDrivingexperience_@(tblEvaluationList.RowCount)" class="form-check-input" value="@(tblEvaluationList.IsDrivingexperience.GetViewValue())" disabled checked="@(ConvertToBool(tblEvaluationList.IsDrivingexperience.CurrentValue))">
    <label class="form-check-label" for="x_IsDrivingexperience_@(tblEvaluationList.RowCount)"></label>
</div></span>
</div></div>
        </div>
        }
    }
    </div><!-- /.card-body -->
@if (!tblEvaluationList.IsExport()) {
    if (tblEvaluationList.MultiColumnListOptionsPosition.StartsWith("bottom", StringComparison.InvariantCultureIgnoreCase)) {
    <div class="card-footer">
        <div class="ew-multi-column-list-option ew-@(tblEvaluationList.MultiColumnListOptionsPosition)">
@{
    // Render list options (body, bottom)
    tblEvaluationList.ListOptions.Tag = "div";
}
@tblEvaluationList.ListOptions.RenderBody(tblEvaluationList.MultiColumnListOptionsPosition, tblEvaluationList.RowCount)
        </div><!-- /.ew-multi-column-list-option -->
    </div><!-- /.card-footer -->
    }
}
</div><!-- /.card -->
</div><!-- /.col-* -->
    } @* End if *@

    // Reset for template row
    if (SameString(tblEvaluationList.RowIndex, "$rowindex$"))
        tblEvaluationList.RowIndex = 0;

    // Reset inline add/copy row
    if ((tblEvaluationList.IsCopy || tblEvaluationList.IsAdd) && tblEvaluationList.RowIndex is int rowIndex2 && rowIndex2 == 0)
        tblEvaluationList.RowIndex = 1;
} @* End While *@
} @* tblEvaluationList.TotalRecords > 0 (end) *@
</div><!-- /.ew-multi-column-row -->
@if (Empty(tblEvaluationList.CurrentAction) && !tblEvaluationList.UseAjaxActions) {
<input type="hidden" name="action" id="action" value="">
}
</form><!-- /.ew-list-form -->
@{ tblEvaluationList.CloseRecordset(); }
