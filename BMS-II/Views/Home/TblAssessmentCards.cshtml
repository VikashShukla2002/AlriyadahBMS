@if (!tblAssessmentList.IsExport()) {
<div>
@if (!tblAssessmentList.IsGridAdd && !(tblAssessmentList.IsGridEdit && tblAssessmentList.ModalGridEdit) && !tblAssessmentList.IsMultiEdit) {
@Html.Raw(tblAssessmentList.Pager.Render())
}
<div class="ew-list-other-options">
@tblAssessmentList.OtherOptions.RenderBody()
</div>
</div>
}
@if (tblAssessmentList.ModalGridAdd && tblAssessmentList.IsGridAdd || tblAssessmentList.ModalGridEdit && tblAssessmentList.IsGridEdit || tblAssessmentList.ModalMultiEdit && tblAssessmentList.IsMultiEdit) {
<script>
var currentTable = @Html.Raw(ConvertToJson(tblAssessmentList.ToClientVar()));
ew.deepAssign(ew.vars, { tables: { tblAssessment: currentTable } });
var currentPageID = ew.PAGE_ID = "list";
var currentForm;
var @(tblAssessmentList.FormName);
loadjs.ready(["wrapper", "head"], function () {
    let $ = jQuery;
    let fields = currentTable.fields;

    // Form object
    let form = new ew.FormBuilder()
        .setId("@(tblAssessmentList.FormName)")
        .setPageId("list")
        .setSubmitWithFetch(@(tblAssessmentList.UseAjaxActions ? "true" : "false"))
        .setFormKeyCountName("@(tblAssessmentList.FormKeyCountName)")

        // Dynamic selection lists
        .setLists({
            "str_Username": @Html.Raw(tblAssessmentList.str_Username.ToClientList(tblAssessmentList)),
            "Assessment_Type": @Html.Raw(tblAssessmentList.Assessment_Type.ToClientList(tblAssessmentList)),
            "AssessmentDate": @Html.Raw(tblAssessmentList.AssessmentDate.ToClientList(tblAssessmentList)),
            "isAssessmentDone": @Html.Raw(tblAssessmentList.isAssessmentDone.ToClientList(tblAssessmentList)),
            "AssessmentScore": @Html.Raw(tblAssessmentList.AssessmentScore.ToClientList(tblAssessmentList)),
        })
        .build();
    window[form.id] = form;
    currentForm = form;
    loadjs.done(form.id);
});
</script>
<script>
ew.PREVIEW_SELECTOR = ".ew-preview-btn";
ew.PREVIEW_MODAL_CLASS = "modal modal-fullscreen-sm-down";
ew.PREVIEW_ROW = true;
ew.PREVIEW_SINGLE_ROW = false;
ew.PREVIEW || ew.ready("head", ew.PATH_BASE + "js/preview.min.js?v=20.5.0", "preview");
</script>
}
<form name="@(tblAssessmentList.FormName)" id="@(tblAssessmentList.FormName)" class="ew-form ew-list-form ew-multi-column-form" action="@AppPath(tblAssessmentList.PageName)" method="post" novalidate autocomplete="off">
@if (CurrentPage.CheckToken) {
    <input type="hidden" name="@Config.TokenNameKey" value="@Config.TokenName"><!-- CSRF token name -->
    @Html.AntiForgeryToken()
}
@if (tblAssessmentList.IsModal) {
<input type="hidden" name="modal" value="1">
}
@if (tblAssessmentList.CurrentMasterTable == "tblStudents" && !Empty(tblAssessmentList.CurrentAction)) {
<input type="hidden" name="@(Config.TableShowMaster)" value="tblStudents">
<input type="hidden" name="fk_str_Username" value="@(HtmlEncode(tblAssessmentList.str_Username.SessionValue))">
}
<div class="@(tblAssessmentList.GetMultiColumnRowClass())">
@if (tblAssessmentList.TotalRecords > 0 || tblAssessmentList.IsGridEdit || tblAssessmentList.IsMultiEdit) {
    await tblAssessmentList.SetupGrid();
    bool eof = tblAssessmentList.Recordset == null; // DN
while (tblAssessmentList.RecordCount < tblAssessmentList.StopRecord || SameString(tblAssessmentList.RowIndex, "$rowindex$")) { // Begin While
    if (!eof && !SameString(tblAssessmentList.RowIndex, "$rowindex$") &&
        (!tblAssessmentList.IsGridAdd || tblAssessmentList.CurrentMode == "copy") &&
        (!((tblAssessmentList.IsCopy || tblAssessmentList.IsAdd) && tblAssessmentList.RowIndex is int rowIndex && rowIndex == 0))) // DN
        eof = !await tblAssessmentList.Recordset.ReadAsync();
    tblAssessmentList.RecordCount++;
    if (tblAssessmentList.RecordCount >= tblAssessmentList.StartRecord) {
        await tblAssessmentList.SetupRow();
<div class="@(tblAssessmentList.GetMultiColumnColClass())" @Html.Raw(tblAssessmentList.RowAttributes)>
<div class="@(tblAssessmentList.MultiColumnCardClass)">
    @if (tblAssessmentList.MultiColumnListOptionsPosition.StartsWith("top", StringComparison.InvariantCultureIgnoreCase)) {
    <div class="card-header">
        <div class="ew-multi-column-list-option ew-@(tblAssessmentList.MultiColumnListOptionsPosition)">
@{
    // Render list options (body, bottom)
    tblAssessmentList.ListOptions.Tag = "div";
    tblAssessmentList.ListOptions.RenderBody(tblAssessmentList.MultiColumnListOptionsPosition, tblAssessmentList.RowCount);
}
        </div><!-- /.ew-multi-column-list-option -->
    </div>
    }
    <div class="card-body">
    @if (tblAssessmentList.str_First_Name.Visible) { // tblAssessmentList.str_First_Name.Visible (begin)
        if (tblAssessmentList.RowType == RowType.View) { // View record
        <div class="row tblAssessment_str_First_Name">
            <div class="col col-sm-4 tblAssessment_str_First_Name">@Html.Raw(tblAssessmentList.RenderFieldHeader(tblAssessmentList.str_First_Name))</div>
            <div class="col col-sm-8"><div @Html.Raw(tblAssessmentList.str_First_Name.CellAttributes)>
<span @Html.Raw(tblAssessmentList.str_First_Name.ViewAttributes)>
@Html.Raw(tblAssessmentList.str_First_Name.GetViewValue())</span>
</div></div>
        </div>
        } else { // Add/edit record
        <div class="row tblAssessment_str_First_Name">
            <label class="@(tblAssessmentList.LeftColumnClass)">@Html.Raw(tblAssessmentList.str_First_Name.Caption)</label>
            <div class="@(tblAssessmentList.RightColumnClass)"><div @Html.Raw(tblAssessmentList.str_First_Name.CellAttributes)>
<span @Html.Raw(tblAssessmentList.str_First_Name.ViewAttributes)>
@Html.Raw(tblAssessmentList.str_First_Name.GetViewValue())</span>
</div></div>
        </div>
        }
    }
    @if (tblAssessmentList.str_Middle_Name.Visible) { // tblAssessmentList.str_Middle_Name.Visible (begin)
        if (tblAssessmentList.RowType == RowType.View) { // View record
        <div class="row tblAssessment_str_Middle_Name">
            <div class="col col-sm-4 tblAssessment_str_Middle_Name">@Html.Raw(tblAssessmentList.RenderFieldHeader(tblAssessmentList.str_Middle_Name))</div>
            <div class="col col-sm-8"><div @Html.Raw(tblAssessmentList.str_Middle_Name.CellAttributes)>
<span @Html.Raw(tblAssessmentList.str_Middle_Name.ViewAttributes)>
@Html.Raw(tblAssessmentList.str_Middle_Name.GetViewValue())</span>
</div></div>
        </div>
        } else { // Add/edit record
        <div class="row tblAssessment_str_Middle_Name">
            <label class="@(tblAssessmentList.LeftColumnClass)">@Html.Raw(tblAssessmentList.str_Middle_Name.Caption)</label>
            <div class="@(tblAssessmentList.RightColumnClass)"><div @Html.Raw(tblAssessmentList.str_Middle_Name.CellAttributes)>
<span @Html.Raw(tblAssessmentList.str_Middle_Name.ViewAttributes)>
@Html.Raw(tblAssessmentList.str_Middle_Name.GetViewValue())</span>
</div></div>
        </div>
        }
    }
    @if (tblAssessmentList.str_Last_Name.Visible) { // tblAssessmentList.str_Last_Name.Visible (begin)
        if (tblAssessmentList.RowType == RowType.View) { // View record
        <div class="row tblAssessment_str_Last_Name">
            <div class="col col-sm-4 tblAssessment_str_Last_Name">@Html.Raw(tblAssessmentList.RenderFieldHeader(tblAssessmentList.str_Last_Name))</div>
            <div class="col col-sm-8"><div @Html.Raw(tblAssessmentList.str_Last_Name.CellAttributes)>
<span @Html.Raw(tblAssessmentList.str_Last_Name.ViewAttributes)>
@Html.Raw(tblAssessmentList.str_Last_Name.GetViewValue())</span>
</div></div>
        </div>
        } else { // Add/edit record
        <div class="row tblAssessment_str_Last_Name">
            <label class="@(tblAssessmentList.LeftColumnClass)">@Html.Raw(tblAssessmentList.str_Last_Name.Caption)</label>
            <div class="@(tblAssessmentList.RightColumnClass)"><div @Html.Raw(tblAssessmentList.str_Last_Name.CellAttributes)>
<span @Html.Raw(tblAssessmentList.str_Last_Name.ViewAttributes)>
@Html.Raw(tblAssessmentList.str_Last_Name.GetViewValue())</span>
</div></div>
        </div>
        }
    }
    @if (tblAssessmentList.str_Username.Visible) { // tblAssessmentList.str_Username.Visible (begin)
        if (tblAssessmentList.RowType == RowType.View) { // View record
        <div class="row tblAssessment_str_Username">
            <div class="col col-sm-4 tblAssessment_str_Username">@Html.Raw(tblAssessmentList.RenderFieldHeader(tblAssessmentList.str_Username))</div>
            <div class="col col-sm-8"><div @Html.Raw(tblAssessmentList.str_Username.CellAttributes)>
<span @Html.Raw(tblAssessmentList.str_Username.ViewAttributes)>
@Html.Raw(tblAssessmentList.str_Username.GetViewValue())</span>
</div></div>
        </div>
        } else { // Add/edit record
        <div class="row tblAssessment_str_Username">
            <label class="@(tblAssessmentList.LeftColumnClass)">@Html.Raw(tblAssessmentList.str_Username.Caption)</label>
            <div class="@(tblAssessmentList.RightColumnClass)"><div @Html.Raw(tblAssessmentList.str_Username.CellAttributes)>
<span @Html.Raw(tblAssessmentList.str_Username.ViewAttributes)>
@Html.Raw(tblAssessmentList.str_Username.GetViewValue())</span>
</div></div>
        </div>
        }
    }
    @if (tblAssessmentList.Assessment_Type.Visible) { // tblAssessmentList.Assessment_Type.Visible (begin)
        if (tblAssessmentList.RowType == RowType.View) { // View record
        <div class="row tblAssessment_Assessment_Type">
            <div class="col col-sm-4 tblAssessment_Assessment_Type">@Html.Raw(tblAssessmentList.RenderFieldHeader(tblAssessmentList.Assessment_Type))</div>
            <div class="col col-sm-8"><div @Html.Raw(tblAssessmentList.Assessment_Type.CellAttributes)>
<span @Html.Raw(tblAssessmentList.Assessment_Type.ViewAttributes)>
@Html.Raw(tblAssessmentList.Assessment_Type.GetViewValue())</span>
</div></div>
        </div>
        } else { // Add/edit record
        <div class="row tblAssessment_Assessment_Type">
            <label class="@(tblAssessmentList.LeftColumnClass)">@Html.Raw(tblAssessmentList.Assessment_Type.Caption)</label>
            <div class="@(tblAssessmentList.RightColumnClass)"><div @Html.Raw(tblAssessmentList.Assessment_Type.CellAttributes)>
<span @Html.Raw(tblAssessmentList.Assessment_Type.ViewAttributes)>
@Html.Raw(tblAssessmentList.Assessment_Type.GetViewValue())</span>
</div></div>
        </div>
        }
    }
    @if (tblAssessmentList.AssessmentDate.Visible) { // tblAssessmentList.AssessmentDate.Visible (begin)
        if (tblAssessmentList.RowType == RowType.View) { // View record
        <div class="row tblAssessment_AssessmentDate">
            <div class="col col-sm-4 tblAssessment_AssessmentDate">@Html.Raw(tblAssessmentList.RenderFieldHeader(tblAssessmentList.AssessmentDate))</div>
            <div class="col col-sm-8"><div @Html.Raw(tblAssessmentList.AssessmentDate.CellAttributes)>
<span @Html.Raw(tblAssessmentList.AssessmentDate.ViewAttributes)>
@Html.Raw(tblAssessmentList.AssessmentDate.GetViewValue())</span>
</div></div>
        </div>
        } else { // Add/edit record
        <div class="row tblAssessment_AssessmentDate">
            <label class="@(tblAssessmentList.LeftColumnClass)">@Html.Raw(tblAssessmentList.AssessmentDate.Caption)</label>
            <div class="@(tblAssessmentList.RightColumnClass)"><div @Html.Raw(tblAssessmentList.AssessmentDate.CellAttributes)>
<span @Html.Raw(tblAssessmentList.AssessmentDate.ViewAttributes)>
@Html.Raw(tblAssessmentList.AssessmentDate.GetViewValue())</span>
</div></div>
        </div>
        }
    }
    @if (tblAssessmentList.isAssessmentDone.Visible) { // tblAssessmentList.isAssessmentDone.Visible (begin)
        if (tblAssessmentList.RowType == RowType.View) { // View record
        <div class="row tblAssessment_isAssessmentDone">
            <div class="col col-sm-4 tblAssessment_isAssessmentDone">@Html.Raw(tblAssessmentList.RenderFieldHeader(tblAssessmentList.isAssessmentDone))</div>
            <div class="col col-sm-8"><div @Html.Raw(tblAssessmentList.isAssessmentDone.CellAttributes)>
<span @Html.Raw(tblAssessmentList.isAssessmentDone.ViewAttributes)>
@Html.Raw(tblAssessmentList.isAssessmentDone.GetViewValue())</span>
</div></div>
        </div>
        } else { // Add/edit record
        <div class="row tblAssessment_isAssessmentDone">
            <label class="@(tblAssessmentList.LeftColumnClass)">@Html.Raw(tblAssessmentList.isAssessmentDone.Caption)</label>
            <div class="@(tblAssessmentList.RightColumnClass)"><div @Html.Raw(tblAssessmentList.isAssessmentDone.CellAttributes)>
<span @Html.Raw(tblAssessmentList.isAssessmentDone.ViewAttributes)>
@Html.Raw(tblAssessmentList.isAssessmentDone.GetViewValue())</span>
</div></div>
        </div>
        }
    }
    @if (tblAssessmentList.AssessmentScore.Visible) { // tblAssessmentList.AssessmentScore.Visible (begin)
        if (tblAssessmentList.RowType == RowType.View) { // View record
        <div class="row tblAssessment_AssessmentScore">
            <div class="col col-sm-4 tblAssessment_AssessmentScore">@Html.Raw(tblAssessmentList.RenderFieldHeader(tblAssessmentList.AssessmentScore))</div>
            <div class="col col-sm-8"><div @Html.Raw(tblAssessmentList.AssessmentScore.CellAttributes)>
<span @Html.Raw(tblAssessmentList.AssessmentScore.ViewAttributes)>
@Html.Raw(tblAssessmentList.AssessmentScore.GetViewValue())</span>
</div></div>
        </div>
        } else { // Add/edit record
        <div class="row tblAssessment_AssessmentScore">
            <label class="@(tblAssessmentList.LeftColumnClass)">@Html.Raw(tblAssessmentList.AssessmentScore.Caption)</label>
            <div class="@(tblAssessmentList.RightColumnClass)"><div @Html.Raw(tblAssessmentList.AssessmentScore.CellAttributes)>
<span @Html.Raw(tblAssessmentList.AssessmentScore.ViewAttributes)>
@Html.Raw(tblAssessmentList.AssessmentScore.GetViewValue())</span>
</div></div>
        </div>
        }
    }
    </div><!-- /.card-body -->
@if (!tblAssessmentList.IsExport()) {
    if (tblAssessmentList.MultiColumnListOptionsPosition.StartsWith("bottom", StringComparison.InvariantCultureIgnoreCase)) {
    <div class="card-footer">
        <div class="ew-multi-column-list-option ew-@(tblAssessmentList.MultiColumnListOptionsPosition)">
@{
    // Render list options (body, bottom)
    tblAssessmentList.ListOptions.Tag = "div";
}
@tblAssessmentList.ListOptions.RenderBody(tblAssessmentList.MultiColumnListOptionsPosition, tblAssessmentList.RowCount)
        </div><!-- /.ew-multi-column-list-option -->
    </div><!-- /.card-footer -->
    }
}
</div><!-- /.card -->
</div><!-- /.col-* -->
    } @* End if *@

    // Reset for template row
    if (SameString(tblAssessmentList.RowIndex, "$rowindex$"))
        tblAssessmentList.RowIndex = 0;

    // Reset inline add/copy row
    if ((tblAssessmentList.IsCopy || tblAssessmentList.IsAdd) && tblAssessmentList.RowIndex is int rowIndex2 && rowIndex2 == 0)
        tblAssessmentList.RowIndex = 1;
} @* End While *@
} @* tblAssessmentList.TotalRecords > 0 (end) *@
</div><!-- /.ew-multi-column-row -->
@if (Empty(tblAssessmentList.CurrentAction) && !tblAssessmentList.UseAjaxActions) {
<input type="hidden" name="action" id="action" value="">
}
</form><!-- /.ew-list-form -->
@{ tblAssessmentList.CloseRecordset(); }
