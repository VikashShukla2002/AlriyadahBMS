@{
    // View
    View = this;

    // Check action result
    if (appointmentCalendarEdit.ActionResult is EmptyResult) { // Terminate page
        return;
    }

    // Layout
    if (DashboardReport) {
        if (!appointmentCalendarEdit.Visible) { // Not visible, return
            return;
        }
        Layout = ""; // No layout
    } else {
        if (!appointmentCalendarEdit.UseLayout) // UseLayout = false // DN
            Layout = "";
        else
            Layout = "_Layout";
    }

    // Local variables (Temp data)
    #pragma warning disable 168
    string? sqlWrk, filterWrk, whereWrk, curVal, dispVal;
    List<Dictionary<string, object>>? rswrk;
    string[]? arWrk;
    List<object?>? listWrk;
    object? guidWrk;
    Func<string>? lookupFilter;
    #pragma warning restore 168
}
<script>
loadjs.ready("head", function() {
    // Write your client script here, no need to add script tags.
});
</script>
@appointmentCalendarEdit.ShowPageHeader()
@appointmentCalendarEdit.ShowMessages()
<main class="edit">
<form name="fAppointment_Calendaredit" id="fAppointment_Calendaredit" class="@(appointmentCalendarEdit.FormClassName)" action="@AppPath(CurrentPageName())" method="post" novalidate autocomplete="off">
<script>
var currentTable = @Html.Raw(ConvertToJson(appointmentCalendarEdit.ToClientVar()));
ew.deepAssign(ew.vars, { tables: { Appointment_Calendar: currentTable } });
var currentPageID = ew.PAGE_ID = "edit";
var currentForm;
var fAppointment_Calendaredit;
loadjs.ready(["wrapper", "head"], function () {
    let $ = jQuery;
    let fields = currentTable.fields;

    // Form object
    let form = new ew.FormBuilder()
        .setId("fAppointment_Calendaredit")
        .setPageId("edit")

        // Add fields
        .setFields([

            ["Id", [fields.Id.visible && fields.Id.required ? ew.Validators.required(fields.Id.caption) : null], fields.Id.isInvalid],
            ["int_Enrollement_Id", [fields.int_Enrollement_Id.visible && fields.int_Enrollement_Id.required ? ew.Validators.required(fields.int_Enrollement_Id.caption) : null], fields.int_Enrollement_Id.isInvalid],
            ["int_PackageID", [fields.int_PackageID.visible && fields.int_PackageID.required ? ew.Validators.required(fields.int_PackageID.caption) : null], fields.int_PackageID.isInvalid],
            ["_Title", [fields._Title.visible && fields._Title.required ? ew.Validators.required(fields._Title.caption) : null], fields._Title.isInvalid],
            ["Start", [fields.Start.visible && fields.Start.required ? ew.Validators.required(fields.Start.caption) : null, ew.Validators.datetime(fields.Start.clientFormatPattern)], fields.Start.isInvalid],
            ["End", [fields.End.visible && fields.End.required ? ew.Validators.required(fields.End.caption) : null, ew.Validators.datetime(fields.End.clientFormatPattern)], fields.End.isInvalid],
            ["AllDay", [fields.AllDay.visible && fields.AllDay.required ? ew.Validators.required(fields.AllDay.caption) : null], fields.AllDay.isInvalid],
            ["Description", [fields.Description.visible && fields.Description.required ? ew.Validators.required(fields.Description.caption) : null], fields.Description.isInvalid],
            ["_Url", [fields._Url.visible && fields._Url.required ? ew.Validators.required(fields._Url.caption) : null], fields._Url.isInvalid],
            ["Display", [fields.Display.visible && fields.Display.required ? ew.Validators.required(fields.Display.caption) : null], fields.Display.isInvalid],
            ["BackgroundColor", [fields.BackgroundColor.visible && fields.BackgroundColor.required ? ew.Validators.required(fields.BackgroundColor.caption) : null], fields.BackgroundColor.isInvalid],
            ["CRSS_ID", [fields.CRSS_ID.visible && fields.CRSS_ID.required ? ew.Validators.required(fields.CRSS_ID.caption) : null], fields.CRSS_ID.isInvalid],
            ["str_AppointmentType", [fields.str_AppointmentType.visible && fields.str_AppointmentType.required ? ew.Validators.required(fields.str_AppointmentType.caption) : null], fields.str_AppointmentType.isInvalid],
            ["str_AppointmentStatus", [fields.str_AppointmentStatus.visible && fields.str_AppointmentStatus.required ? ew.Validators.required(fields.str_AppointmentStatus.caption) : null], fields.str_AppointmentStatus.isInvalid],
            ["str_Username", [fields.str_Username.visible && fields.str_Username.required ? ew.Validators.required(fields.str_Username.caption) : null], fields.str_Username.isInvalid]
        ])

        // Form_CustomValidate
        .setCustomValidate(
            function(fobj) { // DO NOT CHANGE THIS LINE!
                    // Your custom validation code here, return false if invalid.
                    return true;
                }
        )

        // Use JavaScript validation or not
        .setValidateRequired(ew.CLIENT_VALIDATE)

        // Dynamic selection lists
        .setLists({
            "int_Enrollement_Id": @Html.Raw(appointmentCalendarEdit.int_Enrollement_Id.ToClientList(appointmentCalendarEdit)),
            "int_PackageID": @Html.Raw(appointmentCalendarEdit.int_PackageID.ToClientList(appointmentCalendarEdit)),
            "_Title": @Html.Raw(appointmentCalendarEdit._Title.ToClientList(appointmentCalendarEdit)),
            "AllDay": @Html.Raw(appointmentCalendarEdit.AllDay.ToClientList(appointmentCalendarEdit)),
            "str_AppointmentType": @Html.Raw(appointmentCalendarEdit.str_AppointmentType.ToClientList(appointmentCalendarEdit)),
            "str_AppointmentStatus": @Html.Raw(appointmentCalendarEdit.str_AppointmentStatus.ToClientList(appointmentCalendarEdit)),
        })
        .build();
    window[form.id] = form;
    currentForm = form;
    loadjs.done(form.id);
});
</script>
@if (CurrentPage.CheckToken) {
    <input type="hidden" name="@Config.TokenNameKey" value="@Config.TokenName"><!-- CSRF token name -->
    @Html.AntiForgeryToken()
}
<input type="hidden" name="action" id="action" value="update">
<input type="hidden" name="modal" value="@ConvertToInt(appointmentCalendarEdit.IsModal)">
@if (IsJsonResponse()) {
<input type="hidden" name="json" value="1">
}
<input type="hidden" name="@(appointmentCalendarEdit.OldKeyName)" value="@Html.Raw(appointmentCalendarEdit.OldKey)">
<div class="ew-edit-div"><!-- page* -->
@if (appointmentCalendarEdit.Id.Visible) { // appointmentCalendarEdit.Id.Visible (begin)
    <div id="r_Id" @Html.Raw(appointmentCalendarEdit.Id.RowAttributes)>
        <label id="elh_Appointment_Calendar_Id" class="@(appointmentCalendarEdit.LeftColumnClass)">@Html.Raw(appointmentCalendarEdit.Id.Caption)@Html.Raw(appointmentCalendarEdit.Id.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(appointmentCalendarEdit.RightColumnClass)"><div @Html.Raw(appointmentCalendarEdit.Id.CellAttributes)>
<span id="el_Appointment_Calendar_Id">
<span @Html.Raw(appointmentCalendarEdit.Id.ViewAttributes)>
<input type="text" readonly class="form-control-plaintext" value="@Html.Raw(RemoveHtml(ConvertToString(appointmentCalendarEdit.Id.EditValue)))"></span>
<input type="hidden" data-table="Appointment_Calendar" data-field="x_Id" data-hidden="1" name="x_Id" id="x_Id" value="@Html.Raw(HtmlEncode(appointmentCalendarEdit.Id.CurrentValue))">
</span>
</div></div>
    </div>
} @* appointmentCalendarEdit.Id.Visible (end) *@
@if (appointmentCalendarEdit.int_Enrollement_Id.Visible) { // appointmentCalendarEdit.int_Enrollement_Id.Visible (begin)
    <div id="r_int_Enrollement_Id" @Html.Raw(appointmentCalendarEdit.int_Enrollement_Id.RowAttributes)>
        <label id="elh_Appointment_Calendar_int_Enrollement_Id" for="x_int_Enrollement_Id" class="@(appointmentCalendarEdit.LeftColumnClass)">@Html.Raw(appointmentCalendarEdit.int_Enrollement_Id.Caption)@Html.Raw(appointmentCalendarEdit.int_Enrollement_Id.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(appointmentCalendarEdit.RightColumnClass)"><div @Html.Raw(appointmentCalendarEdit.int_Enrollement_Id.CellAttributes)>
<span id="el_Appointment_Calendar_int_Enrollement_Id">
    <select
        id="x_int_Enrollement_Id"
        name="x_int_Enrollement_Id"
        class="form-select ew-select@(appointmentCalendarEdit.int_Enrollement_Id.IsInvalidClass)"
        data-select2-id="fAppointment_Calendaredit_x_int_Enrollement_Id"
        data-table="Appointment_Calendar"
        data-field="x_int_Enrollement_Id"
        data-value-separator="@(appointmentCalendarEdit.int_Enrollement_Id.DisplayValueSeparatorAttribute)"
        data-placeholder="@(HtmlEncode(appointmentCalendarEdit.int_Enrollement_Id.PlaceHolder))"
        data-ew-action="update-options"
        @Html.Raw(appointmentCalendarEdit.int_Enrollement_Id.EditAttributes)>
        @(appointmentCalendarEdit.int_Enrollement_Id.SelectOptionListHtml("x_int_Enrollement_Id"))
    </select>
    @Html.Raw(appointmentCalendarEdit.int_Enrollement_Id.GetCustomMessage)
    <div class="invalid-feedback">@Html.Raw(appointmentCalendarEdit.int_Enrollement_Id.GetErrorMessage())</div>
@Html.Raw(appointmentCalendarEdit.int_Enrollement_Id.Lookup.GetParamTag(appointmentCalendarEdit, "p_x_int_Enrollement_Id"))
<script>
loadjs.ready("fAppointment_Calendaredit", function() {
    var options = { name: "x_int_Enrollement_Id", selectId: "fAppointment_Calendaredit_x_int_Enrollement_Id" },
        el = document.querySelector("select[data-select2-id='" + options.selectId + "']");
    if (!el)
        return;
    options.closeOnSelect = !options.multiple;
    options.dropdownParent = el.closest("#ew-modal-dialog, #ew-add-opt-dialog");
    if (fAppointment_Calendaredit.lists.int_Enrollement_Id?.lookupOptions.length) {
        options.data = { id: "x_int_Enrollement_Id", form: "fAppointment_Calendaredit" };
    } else {
        options.ajax = { id: "x_int_Enrollement_Id", form: "fAppointment_Calendaredit", limit: ew.LOOKUP_PAGE_SIZE };
    }
    options.minimumResultsForSearch = Infinity;
    options = Object.assign({}, ew.selectOptions, options, ew.vars.tables.Appointment_Calendar.fields.int_Enrollement_Id.selectOptions);
    ew.createSelect(options);
});
</script>
</span>
</div></div>
    </div>
} @* appointmentCalendarEdit.int_Enrollement_Id.Visible (end) *@
@if (appointmentCalendarEdit.int_PackageID.Visible) { // appointmentCalendarEdit.int_PackageID.Visible (begin)
    <div id="r_int_PackageID" @Html.Raw(appointmentCalendarEdit.int_PackageID.RowAttributes)>
        <label id="elh_Appointment_Calendar_int_PackageID" for="x_int_PackageID" class="@(appointmentCalendarEdit.LeftColumnClass)">@Html.Raw(appointmentCalendarEdit.int_PackageID.Caption)@Html.Raw(appointmentCalendarEdit.int_PackageID.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(appointmentCalendarEdit.RightColumnClass)"><div @Html.Raw(appointmentCalendarEdit.int_PackageID.CellAttributes)>
<span id="el_Appointment_Calendar_int_PackageID">
<div class="input-group flex-nowrap">
    <select
        id="x_int_PackageID"
        name="x_int_PackageID"
        class="form-select ew-select@(appointmentCalendarEdit.int_PackageID.IsInvalidClass)"
        data-select2-id="fAppointment_Calendaredit_x_int_PackageID"
        data-table="Appointment_Calendar"
        data-field="x_int_PackageID"
        data-value-separator="@(appointmentCalendarEdit.int_PackageID.DisplayValueSeparatorAttribute)"
        data-placeholder="@(HtmlEncode(appointmentCalendarEdit.int_PackageID.PlaceHolder))"
        data-ew-action="update-options"
        @Html.Raw(appointmentCalendarEdit.int_PackageID.EditAttributes)>
        @(appointmentCalendarEdit.int_PackageID.SelectOptionListHtml("x_int_PackageID"))
    </select>
    @if (AllowAdd(CurrentProjectID + "tblStudentEnrollment") && !appointmentCalendarEdit.int_PackageID.ReadOnly) {
    <button type="button" class="btn btn-default ew-add-opt-btn" id="aol_x_int_PackageID" title="@Html.Raw(Language.Phrase("AddLink", true) + "&nbsp;" + appointmentCalendarEdit.int_PackageID.Caption)" data-title="@Html.Raw(appointmentCalendarEdit.int_PackageID.Caption)" data-ew-action="add-option" data-el="x_int_PackageID" data-url="@AppPath("TblStudentEnrollmentAddopt")"><i class="fa-solid fa-plus ew-icon"></i></button>
    }
</div>
@Html.Raw(appointmentCalendarEdit.int_PackageID.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(appointmentCalendarEdit.int_PackageID.GetErrorMessage())</div>
@Html.Raw(appointmentCalendarEdit.int_PackageID.Lookup.GetParamTag(appointmentCalendarEdit, "p_x_int_PackageID"))
<script>
loadjs.ready("fAppointment_Calendaredit", function() {
    var options = { name: "x_int_PackageID", selectId: "fAppointment_Calendaredit_x_int_PackageID" },
        el = document.querySelector("select[data-select2-id='" + options.selectId + "']");
    if (!el)
        return;
    options.closeOnSelect = !options.multiple;
    options.dropdownParent = el.closest("#ew-modal-dialog, #ew-add-opt-dialog");
    if (fAppointment_Calendaredit.lists.int_PackageID?.lookupOptions.length) {
        options.data = { id: "x_int_PackageID", form: "fAppointment_Calendaredit" };
    } else {
        options.ajax = { id: "x_int_PackageID", form: "fAppointment_Calendaredit", limit: ew.LOOKUP_PAGE_SIZE };
    }
    options.minimumResultsForSearch = Infinity;
    options = Object.assign({}, ew.selectOptions, options, ew.vars.tables.Appointment_Calendar.fields.int_PackageID.selectOptions);
    ew.createSelect(options);
});
</script>
</span>
</div></div>
    </div>
} @* appointmentCalendarEdit.int_PackageID.Visible (end) *@
@if (appointmentCalendarEdit._Title.Visible) { // appointmentCalendarEdit._Title.Visible (begin)
    <div id="r__Title" @Html.Raw(appointmentCalendarEdit._Title.RowAttributes)>
        <label id="elh_Appointment_Calendar__Title" for="x__Title" class="@(appointmentCalendarEdit.LeftColumnClass)">@Html.Raw(appointmentCalendarEdit._Title.Caption)@Html.Raw(appointmentCalendarEdit._Title.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(appointmentCalendarEdit.RightColumnClass)"><div @Html.Raw(appointmentCalendarEdit._Title.CellAttributes)>
<span id="el_Appointment_Calendar__Title">
    <select
        id="x__Title"
        name="x__Title"
        class="form-select ew-select@(appointmentCalendarEdit._Title.IsInvalidClass)"
        data-select2-id="fAppointment_Calendaredit_x__Title"
        data-table="Appointment_Calendar"
        data-field="x__Title"
        data-value-separator="@(appointmentCalendarEdit._Title.DisplayValueSeparatorAttribute)"
        data-placeholder="@(HtmlEncode(appointmentCalendarEdit._Title.PlaceHolder))"
        data-ew-action="update-options"
        @Html.Raw(appointmentCalendarEdit._Title.EditAttributes)>
        @(appointmentCalendarEdit._Title.SelectOptionListHtml("x__Title"))
    </select>
    @Html.Raw(appointmentCalendarEdit._Title.GetCustomMessage)
    <div class="invalid-feedback">@Html.Raw(appointmentCalendarEdit._Title.GetErrorMessage())</div>
@Html.Raw(appointmentCalendarEdit._Title.Lookup.GetParamTag(appointmentCalendarEdit, "p_x__Title"))
<script>
loadjs.ready("fAppointment_Calendaredit", function() {
    var options = { name: "x__Title", selectId: "fAppointment_Calendaredit_x__Title" },
        el = document.querySelector("select[data-select2-id='" + options.selectId + "']");
    if (!el)
        return;
    options.closeOnSelect = !options.multiple;
    options.dropdownParent = el.closest("#ew-modal-dialog, #ew-add-opt-dialog");
    if (fAppointment_Calendaredit.lists._Title?.lookupOptions.length) {
        options.data = { id: "x__Title", form: "fAppointment_Calendaredit" };
    } else {
        options.ajax = { id: "x__Title", form: "fAppointment_Calendaredit", limit: ew.LOOKUP_PAGE_SIZE };
    }
    options.minimumResultsForSearch = Infinity;
    options = Object.assign({}, ew.selectOptions, options, ew.vars.tables.Appointment_Calendar.fields._Title.selectOptions);
    ew.createSelect(options);
});
</script>
</span>
</div></div>
    </div>
} @* appointmentCalendarEdit._Title.Visible (end) *@
@if (appointmentCalendarEdit.Start.Visible) { // appointmentCalendarEdit.Start.Visible (begin)
    <div id="r_Start" @Html.Raw(appointmentCalendarEdit.Start.RowAttributes)>
        <label id="elh_Appointment_Calendar_Start" for="x_Start" class="@(appointmentCalendarEdit.LeftColumnClass)">@Html.Raw(appointmentCalendarEdit.Start.Caption)@Html.Raw(appointmentCalendarEdit.Start.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(appointmentCalendarEdit.RightColumnClass)"><div @Html.Raw(appointmentCalendarEdit.Start.CellAttributes)>
<span id="el_Appointment_Calendar_Start">
<input type="@(appointmentCalendarEdit.Start.InputTextType)" name="x_Start" id="x_Start" data-table="Appointment_Calendar" data-field="x_Start" value="@Html.Raw(appointmentCalendarEdit.Start.EditValue)" placeholder="@Html.Raw(HtmlEncode(appointmentCalendarEdit.Start.PlaceHolder))" data-format-pattern="@(appointmentCalendarEdit.Start.FormatPattern)"@Html.Raw(appointmentCalendarEdit.Start.EditAttributes) aria-describedby="x_Start_help">
@Html.Raw(appointmentCalendarEdit.Start.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(appointmentCalendarEdit.Start.GetErrorMessage())</div>
@if (!appointmentCalendarEdit.Start.ReadOnly && !appointmentCalendarEdit.Start.Disabled && !appointmentCalendarEdit.Start.EditAttrs.Is("readonly") && !appointmentCalendarEdit.Start.EditAttrs.Is("disabled")) {
<script>
loadjs.ready(["fAppointment_Calendaredit", "datetimepicker"], function () {
    let format = "@Html.Raw(DateFormat(1))", // DN
        options = {
                localization: {
                    locale: ew.LANGUAGE_ID + "-u-nu-" + ew.getNumberingSystem(),
                    hourCycle: format.match(/H/) ? "h24" : "h12",
                    format,
                    ...ew.language.phrase("datetimepicker")
                },
                display: {
                    icons: {
                        previous: ew.IS_RTL ? "fa-solid fa-chevron-right" : "fa-solid fa-chevron-left",
                        next: ew.IS_RTL ? "fa-solid fa-chevron-left" : "fa-solid fa-chevron-right"
                    },
                    components: {
                        hours: !!format.match(/h/i),
                        minutes: !!format.match(/m/),
                        seconds: !!format.match(/s/i)
                    },
                    theme: ew.isDark() ? "dark" : "auto"
                }
            };
    ew.createDateTimePicker("fAppointment_Calendaredit", "x_Start", ew.deepAssign({"useCurrent":false,"display":{"sideBySide":true}}, options));
});
</script>
}
</span>
</div></div>
    </div>
} @* appointmentCalendarEdit.Start.Visible (end) *@
@if (appointmentCalendarEdit.End.Visible) { // appointmentCalendarEdit.End.Visible (begin)
    <div id="r_End" @Html.Raw(appointmentCalendarEdit.End.RowAttributes)>
        <label id="elh_Appointment_Calendar_End" for="x_End" class="@(appointmentCalendarEdit.LeftColumnClass)">@Html.Raw(appointmentCalendarEdit.End.Caption)@Html.Raw(appointmentCalendarEdit.End.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(appointmentCalendarEdit.RightColumnClass)"><div @Html.Raw(appointmentCalendarEdit.End.CellAttributes)>
<span id="el_Appointment_Calendar_End">
<input type="@(appointmentCalendarEdit.End.InputTextType)" name="x_End" id="x_End" data-table="Appointment_Calendar" data-field="x_End" value="@Html.Raw(appointmentCalendarEdit.End.EditValue)" placeholder="@Html.Raw(HtmlEncode(appointmentCalendarEdit.End.PlaceHolder))" data-format-pattern="@(appointmentCalendarEdit.End.FormatPattern)"@Html.Raw(appointmentCalendarEdit.End.EditAttributes) aria-describedby="x_End_help">
@Html.Raw(appointmentCalendarEdit.End.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(appointmentCalendarEdit.End.GetErrorMessage())</div>
@if (!appointmentCalendarEdit.End.ReadOnly && !appointmentCalendarEdit.End.Disabled && !appointmentCalendarEdit.End.EditAttrs.Is("readonly") && !appointmentCalendarEdit.End.EditAttrs.Is("disabled")) {
<script>
loadjs.ready(["fAppointment_Calendaredit", "datetimepicker"], function () {
    let format = "@Html.Raw(DateFormat(1))", // DN
        options = {
                localization: {
                    locale: ew.LANGUAGE_ID + "-u-nu-" + ew.getNumberingSystem(),
                    hourCycle: format.match(/H/) ? "h24" : "h12",
                    format,
                    ...ew.language.phrase("datetimepicker")
                },
                display: {
                    icons: {
                        previous: ew.IS_RTL ? "fa-solid fa-chevron-right" : "fa-solid fa-chevron-left",
                        next: ew.IS_RTL ? "fa-solid fa-chevron-left" : "fa-solid fa-chevron-right"
                    },
                    components: {
                        hours: !!format.match(/h/i),
                        minutes: !!format.match(/m/),
                        seconds: !!format.match(/s/i)
                    },
                    theme: ew.isDark() ? "dark" : "auto"
                }
            };
    ew.createDateTimePicker("fAppointment_Calendaredit", "x_End", ew.deepAssign({"useCurrent":false,"display":{"sideBySide":true}}, options));
});
</script>
}
</span>
</div></div>
    </div>
} @* appointmentCalendarEdit.End.Visible (end) *@
@if (appointmentCalendarEdit.AllDay.Visible) { // appointmentCalendarEdit.AllDay.Visible (begin)
    <div id="r_AllDay" @Html.Raw(appointmentCalendarEdit.AllDay.RowAttributes)>
        <label id="elh_Appointment_Calendar_AllDay" class="@(appointmentCalendarEdit.LeftColumnClass)">@Html.Raw(appointmentCalendarEdit.AllDay.Caption)@Html.Raw(appointmentCalendarEdit.AllDay.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(appointmentCalendarEdit.RightColumnClass)"><div @Html.Raw(appointmentCalendarEdit.AllDay.CellAttributes)>
<span id="el_Appointment_Calendar_AllDay">
<div class="form-check d-inline-block">
    <input type="checkbox" class="form-check-input@(appointmentCalendarEdit.AllDay.IsInvalidClass)" data-table="Appointment_Calendar" data-field="x_AllDay" data-boolean name="x_AllDay" id="x_AllDay" value="1" checked="@ConvertToBool(appointmentCalendarEdit.AllDay.CurrentValue)" @Html.Raw(appointmentCalendarEdit.AllDay.EditAttributes) aria-describedby="x_AllDay_help">
    <div class="invalid-feedback">@Html.Raw(appointmentCalendarEdit.AllDay.GetErrorMessage())</div>
</div>
@Html.Raw(appointmentCalendarEdit.AllDay.GetCustomMessage)
</span>
</div></div>
    </div>
} @* appointmentCalendarEdit.AllDay.Visible (end) *@
@if (appointmentCalendarEdit.Description.Visible) { // appointmentCalendarEdit.Description.Visible (begin)
    <div id="r_Description" @Html.Raw(appointmentCalendarEdit.Description.RowAttributes)>
        <label id="elh_Appointment_Calendar_Description" for="x_Description" class="@(appointmentCalendarEdit.LeftColumnClass)">@Html.Raw(appointmentCalendarEdit.Description.Caption)@Html.Raw(appointmentCalendarEdit.Description.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(appointmentCalendarEdit.RightColumnClass)"><div @Html.Raw(appointmentCalendarEdit.Description.CellAttributes)>
<span id="el_Appointment_Calendar_Description">
<textarea data-table="Appointment_Calendar" data-field="x_Description" name="x_Description" id="x_Description" cols="35" rows="4" placeholder="@Html.Raw(HtmlEncode(appointmentCalendarEdit.Description.PlaceHolder))"@Html.Raw(appointmentCalendarEdit.Description.EditAttributes) aria-describedby="x_Description_help">@(appointmentCalendarEdit.Description.EditValue)</textarea>
@Html.Raw(appointmentCalendarEdit.Description.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(appointmentCalendarEdit.Description.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* appointmentCalendarEdit.Description.Visible (end) *@
@if (appointmentCalendarEdit._Url.Visible) { // appointmentCalendarEdit._Url.Visible (begin)
    <div id="r__Url" @Html.Raw(appointmentCalendarEdit._Url.RowAttributes)>
        <label id="elh_Appointment_Calendar__Url" for="x__Url" class="@(appointmentCalendarEdit.LeftColumnClass)">@Html.Raw(appointmentCalendarEdit._Url.Caption)@Html.Raw(appointmentCalendarEdit._Url.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(appointmentCalendarEdit.RightColumnClass)"><div @Html.Raw(appointmentCalendarEdit._Url.CellAttributes)>
<span id="el_Appointment_Calendar__Url">
<input type="@(appointmentCalendarEdit._Url.InputTextType)" name="x__Url" id="x__Url" data-table="Appointment_Calendar" data-field="x__Url" value="@Html.Raw(appointmentCalendarEdit._Url.EditValue)" size="30" maxlength="255" placeholder="@Html.Raw(HtmlEncode(appointmentCalendarEdit._Url.PlaceHolder))" data-format-pattern="@(appointmentCalendarEdit._Url.FormatPattern)"@Html.Raw(appointmentCalendarEdit._Url.EditAttributes) aria-describedby="x__Url_help">
@Html.Raw(appointmentCalendarEdit._Url.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(appointmentCalendarEdit._Url.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* appointmentCalendarEdit._Url.Visible (end) *@
@if (appointmentCalendarEdit.Display.Visible) { // appointmentCalendarEdit.Display.Visible (begin)
    <div id="r_Display" @Html.Raw(appointmentCalendarEdit.Display.RowAttributes)>
        <label id="elh_Appointment_Calendar_Display" for="x_Display" class="@(appointmentCalendarEdit.LeftColumnClass)">@Html.Raw(appointmentCalendarEdit.Display.Caption)@Html.Raw(appointmentCalendarEdit.Display.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(appointmentCalendarEdit.RightColumnClass)"><div @Html.Raw(appointmentCalendarEdit.Display.CellAttributes)>
<span id="el_Appointment_Calendar_Display">
<input type="@(appointmentCalendarEdit.Display.InputTextType)" name="x_Display" id="x_Display" data-table="Appointment_Calendar" data-field="x_Display" value="@Html.Raw(appointmentCalendarEdit.Display.EditValue)" size="30" maxlength="255" placeholder="@Html.Raw(HtmlEncode(appointmentCalendarEdit.Display.PlaceHolder))" data-format-pattern="@(appointmentCalendarEdit.Display.FormatPattern)"@Html.Raw(appointmentCalendarEdit.Display.EditAttributes) aria-describedby="x_Display_help">
@Html.Raw(appointmentCalendarEdit.Display.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(appointmentCalendarEdit.Display.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* appointmentCalendarEdit.Display.Visible (end) *@
@if (appointmentCalendarEdit.BackgroundColor.Visible) { // appointmentCalendarEdit.BackgroundColor.Visible (begin)
    <div id="r_BackgroundColor" @Html.Raw(appointmentCalendarEdit.BackgroundColor.RowAttributes)>
        <label id="elh_Appointment_Calendar_BackgroundColor" for="x_BackgroundColor" class="@(appointmentCalendarEdit.LeftColumnClass)">@Html.Raw(appointmentCalendarEdit.BackgroundColor.Caption)@Html.Raw(appointmentCalendarEdit.BackgroundColor.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(appointmentCalendarEdit.RightColumnClass)"><div @Html.Raw(appointmentCalendarEdit.BackgroundColor.CellAttributes)>
<span id="el_Appointment_Calendar_BackgroundColor">
<input type="@(appointmentCalendarEdit.BackgroundColor.InputTextType)" name="x_BackgroundColor" id="x_BackgroundColor" data-table="Appointment_Calendar" data-field="x_BackgroundColor" value="@Html.Raw(appointmentCalendarEdit.BackgroundColor.EditValue)" size="30" maxlength="255" placeholder="@Html.Raw(HtmlEncode(appointmentCalendarEdit.BackgroundColor.PlaceHolder))" data-format-pattern="@(appointmentCalendarEdit.BackgroundColor.FormatPattern)"@Html.Raw(appointmentCalendarEdit.BackgroundColor.EditAttributes) aria-describedby="x_BackgroundColor_help">
@Html.Raw(appointmentCalendarEdit.BackgroundColor.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(appointmentCalendarEdit.BackgroundColor.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* appointmentCalendarEdit.BackgroundColor.Visible (end) *@
@if (appointmentCalendarEdit.CRSS_ID.Visible) { // appointmentCalendarEdit.CRSS_ID.Visible (begin)
    <div id="r_CRSS_ID" @Html.Raw(appointmentCalendarEdit.CRSS_ID.RowAttributes)>
        <label id="elh_Appointment_Calendar_CRSS_ID" for="x_CRSS_ID" class="@(appointmentCalendarEdit.LeftColumnClass)">@Html.Raw(appointmentCalendarEdit.CRSS_ID.Caption)@Html.Raw(appointmentCalendarEdit.CRSS_ID.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(appointmentCalendarEdit.RightColumnClass)"><div @Html.Raw(appointmentCalendarEdit.CRSS_ID.CellAttributes)>
<span id="el_Appointment_Calendar_CRSS_ID">
<input type="@(appointmentCalendarEdit.CRSS_ID.InputTextType)" name="x_CRSS_ID" id="x_CRSS_ID" data-table="Appointment_Calendar" data-field="x_CRSS_ID" value="@Html.Raw(appointmentCalendarEdit.CRSS_ID.EditValue)" size="30" maxlength="255" placeholder="@Html.Raw(HtmlEncode(appointmentCalendarEdit.CRSS_ID.PlaceHolder))" data-format-pattern="@(appointmentCalendarEdit.CRSS_ID.FormatPattern)"@Html.Raw(appointmentCalendarEdit.CRSS_ID.EditAttributes) aria-describedby="x_CRSS_ID_help">
@Html.Raw(appointmentCalendarEdit.CRSS_ID.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(appointmentCalendarEdit.CRSS_ID.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* appointmentCalendarEdit.CRSS_ID.Visible (end) *@
@if (appointmentCalendarEdit.str_AppointmentType.Visible) { // appointmentCalendarEdit.str_AppointmentType.Visible (begin)
    <div id="r_str_AppointmentType" @Html.Raw(appointmentCalendarEdit.str_AppointmentType.RowAttributes)>
        <label id="elh_Appointment_Calendar_str_AppointmentType" for="x_str_AppointmentType" class="@(appointmentCalendarEdit.LeftColumnClass)">@Html.Raw(appointmentCalendarEdit.str_AppointmentType.Caption)@Html.Raw(appointmentCalendarEdit.str_AppointmentType.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(appointmentCalendarEdit.RightColumnClass)"><div @Html.Raw(appointmentCalendarEdit.str_AppointmentType.CellAttributes)>
<span id="el_Appointment_Calendar_str_AppointmentType">
    <select
        id="x_str_AppointmentType"
        name="x_str_AppointmentType"
        class="form-select ew-select@(appointmentCalendarEdit.str_AppointmentType.IsInvalidClass)"
        data-select2-id="fAppointment_Calendaredit_x_str_AppointmentType"
        data-table="Appointment_Calendar"
        data-field="x_str_AppointmentType"
        data-value-separator="@(appointmentCalendarEdit.str_AppointmentType.DisplayValueSeparatorAttribute)"
        data-placeholder="@(HtmlEncode(appointmentCalendarEdit.str_AppointmentType.PlaceHolder))"
        @Html.Raw(appointmentCalendarEdit.str_AppointmentType.EditAttributes)>
        @(appointmentCalendarEdit.str_AppointmentType.SelectOptionListHtml("x_str_AppointmentType"))
    </select>
    @Html.Raw(appointmentCalendarEdit.str_AppointmentType.GetCustomMessage)
    <div class="invalid-feedback">@Html.Raw(appointmentCalendarEdit.str_AppointmentType.GetErrorMessage())</div>
@Html.Raw(appointmentCalendarEdit.str_AppointmentType.Lookup.GetParamTag(appointmentCalendarEdit, "p_x_str_AppointmentType"))
<script>
loadjs.ready("fAppointment_Calendaredit", function() {
    var options = { name: "x_str_AppointmentType", selectId: "fAppointment_Calendaredit_x_str_AppointmentType" },
        el = document.querySelector("select[data-select2-id='" + options.selectId + "']");
    if (!el)
        return;
    options.closeOnSelect = !options.multiple;
    options.dropdownParent = el.closest("#ew-modal-dialog, #ew-add-opt-dialog");
    if (fAppointment_Calendaredit.lists.str_AppointmentType?.lookupOptions.length) {
        options.data = { id: "x_str_AppointmentType", form: "fAppointment_Calendaredit" };
    } else {
        options.ajax = { id: "x_str_AppointmentType", form: "fAppointment_Calendaredit", limit: ew.LOOKUP_PAGE_SIZE };
    }
    options.minimumResultsForSearch = Infinity;
    options = Object.assign({}, ew.selectOptions, options, ew.vars.tables.Appointment_Calendar.fields.str_AppointmentType.selectOptions);
    ew.createSelect(options);
});
</script>
</span>
</div></div>
    </div>
} @* appointmentCalendarEdit.str_AppointmentType.Visible (end) *@
@if (appointmentCalendarEdit.str_AppointmentStatus.Visible) { // appointmentCalendarEdit.str_AppointmentStatus.Visible (begin)
    <div id="r_str_AppointmentStatus" @Html.Raw(appointmentCalendarEdit.str_AppointmentStatus.RowAttributes)>
        <label id="elh_Appointment_Calendar_str_AppointmentStatus" for="x_str_AppointmentStatus" class="@(appointmentCalendarEdit.LeftColumnClass)">@Html.Raw(appointmentCalendarEdit.str_AppointmentStatus.Caption)@Html.Raw(appointmentCalendarEdit.str_AppointmentStatus.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(appointmentCalendarEdit.RightColumnClass)"><div @Html.Raw(appointmentCalendarEdit.str_AppointmentStatus.CellAttributes)>
<span id="el_Appointment_Calendar_str_AppointmentStatus">
    <select
        id="x_str_AppointmentStatus"
        name="x_str_AppointmentStatus"
        class="form-select ew-select@(appointmentCalendarEdit.str_AppointmentStatus.IsInvalidClass)"
        data-select2-id="fAppointment_Calendaredit_x_str_AppointmentStatus"
        data-table="Appointment_Calendar"
        data-field="x_str_AppointmentStatus"
        data-value-separator="@(appointmentCalendarEdit.str_AppointmentStatus.DisplayValueSeparatorAttribute)"
        data-placeholder="@(HtmlEncode(appointmentCalendarEdit.str_AppointmentStatus.PlaceHolder))"
        @Html.Raw(appointmentCalendarEdit.str_AppointmentStatus.EditAttributes)>
        @(appointmentCalendarEdit.str_AppointmentStatus.SelectOptionListHtml("x_str_AppointmentStatus"))
    </select>
    @Html.Raw(appointmentCalendarEdit.str_AppointmentStatus.GetCustomMessage)
    <div class="invalid-feedback">@Html.Raw(appointmentCalendarEdit.str_AppointmentStatus.GetErrorMessage())</div>
<script>
loadjs.ready("fAppointment_Calendaredit", function() {
    var options = { name: "x_str_AppointmentStatus", selectId: "fAppointment_Calendaredit_x_str_AppointmentStatus" },
        el = document.querySelector("select[data-select2-id='" + options.selectId + "']");
    if (!el)
        return;
    options.closeOnSelect = !options.multiple;
    options.dropdownParent = el.closest("#ew-modal-dialog, #ew-add-opt-dialog");
    if (fAppointment_Calendaredit.lists.str_AppointmentStatus?.lookupOptions.length) {
        options.data = { id: "x_str_AppointmentStatus", form: "fAppointment_Calendaredit" };
    } else {
        options.ajax = { id: "x_str_AppointmentStatus", form: "fAppointment_Calendaredit", limit: ew.LOOKUP_PAGE_SIZE };
    }
    options.minimumResultsForSearch = Infinity;
    options = Object.assign({}, ew.selectOptions, options, ew.vars.tables.Appointment_Calendar.fields.str_AppointmentStatus.selectOptions);
    ew.createSelect(options);
});
</script>
</span>
</div></div>
    </div>
} @* appointmentCalendarEdit.str_AppointmentStatus.Visible (end) *@
</div><!-- /page* -->
@{ appointmentCalendarEdit.CloseRecordset(); }
@Html.Raw(appointmentCalendarEdit.IsModal ? "<template class=\"ew-modal-buttons\">" : "<div class=\"row ew-buttons\">")<!-- buttons .row -->
    <div class="@(appointmentCalendarEdit.OffsetColumnClass)"><!-- buttons offset -->
    <button class="btn btn-primary ew-btn" name="btn-action" id="btn-action" type="submit" form="fAppointment_Calendaredit">@Html.Raw(Language.Phrase("SaveBtn"))</button>
@if (IsJsonResponse()) {
    <button class="btn btn-default ew-btn" name="btn-cancel" id="btn-cancel" type="button" data-bs-dismiss="modal">@Html.Raw(Language.Phrase("CancelBtn"))</button>
} else {
    <button class="btn btn-default ew-btn" name="btn-cancel" id="btn-cancel" type="button" form="fAppointment_Calendaredit" data-href="@AppPath(appointmentCalendarEdit.ReturnUrl)">@Html.Raw(Language.Phrase("CancelBtn"))</button>
}
    </div><!-- /buttons offset -->
@Html.Raw(appointmentCalendarEdit.IsModal ? "</template>" : "</div>")<!-- /buttons .row -->
</form>
</main>
@appointmentCalendarEdit.ShowPageFooter()
@Html.Raw(GetDebugMessage())
@ElapsedTime()
<script>
// Field event handlers
loadjs.ready("head", function() {
    ew.addEventHandlers("Appointment_Calendar");
});
</script>
<script>
loadjs.ready("load", function() {
    // Write your table-specific startup script here
    // document.write("page loaded");
});
</script>
