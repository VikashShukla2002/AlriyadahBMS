@if (userLevelsList.ModalGridAdd && userLevelsList.IsGridAdd || userLevelsList.ModalGridEdit && userLevelsList.IsGridEdit || userLevelsList.ModalMultiEdit && userLevelsList.IsMultiEdit) {
<script>
var currentTable = @Html.Raw(ConvertToJson(userLevelsList.ToClientVar()));
ew.deepAssign(ew.vars, { tables: { UserLevels: currentTable } });
var currentPageID = ew.PAGE_ID = "list";
var currentForm;
var @(userLevelsList.FormName);
loadjs.ready(["wrapper", "head"], function () {
    let $ = jQuery;
    let fields = currentTable.fields;

    // Form object
    let form = new ew.FormBuilder()
        .setId("@(userLevelsList.FormName)")
        .setPageId("list")
        .setSubmitWithFetch(@(userLevelsList.UseAjaxActions ? "true" : "false"))
        .setFormKeyCountName("@(userLevelsList.FormKeyCountName)")
        .build();
    window[form.id] = form;
    currentForm = form;
    loadjs.done(form.id);
});
</script>
<script>
ew.PREVIEW_SELECTOR = ".ew-preview-btn";
ew.PREVIEW_MODAL_CLASS = "modal modal-fullscreen-sm-down";
ew.PREVIEW_ROW = true;
ew.PREVIEW_SINGLE_ROW = false;
ew.PREVIEW || ew.ready("head", ew.PATH_BASE + "js/preview.min.js?v=20.5.0", "preview");
</script>
}
<div class="card ew-card ew-grid@(userLevelsList.IsAddOrEdit ? " ew-grid-add-edit" : "") @(userLevelsList.TableGridClass)">
@if (!userLevelsList.IsExport()) {
<div class="card-header ew-grid-upper-panel">
@if (!userLevelsList.IsGridAdd && !(userLevelsList.IsGridEdit && userLevelsList.ModalGridEdit) && !userLevelsList.IsMultiEdit) {
@Html.Raw(userLevelsList.Pager.Render())
}
<div class="ew-list-other-options">
@userLevelsList.OtherOptions.RenderBody()
</div>
</div>
}
<form name="@(userLevelsList.FormName)" id="@(userLevelsList.FormName)" class="ew-form ew-list-form ew-multi-column-form" action="@AppPath(userLevelsList.PageName)" method="post" novalidate autocomplete="off">
@if (CurrentPage.CheckToken) {
    <input type="hidden" name="@Config.TokenNameKey" value="@Config.TokenName"><!-- CSRF token name -->
    @Html.AntiForgeryToken()
}
@if (userLevelsList.IsModal) {
<input type="hidden" name="modal" value="1">
}
<div id="gmp_UserLevels" class="card-body ew-grid-middle-panel @(userLevelsList.TableContainerClass)" style="@(userLevelsList.TableContainerStyle)">
@if (userLevelsList.TotalRecords > 0 || userLevelsList.IsGridEdit || userLevelsList.IsMultiEdit) {
<table id="tbl_UserLevelslist" class="@(userLevelsList.TableClass)"><!-- .ew-table -->
<thead>
    <tr class="ew-table-header">
@{
    // Header row
    userLevelsList.RowType = RowType.Header;

    // Render list options
    await userLevelsList.RenderListOptions();
}
@* Render list options (header, left) *@
@userLevelsList.ListOptions.RenderHeader("left")
@if (userLevelsList.UserLevelID.Visible) { // userLevelsList.UserLevelID.Visible (begin)
        <th data-name="UserLevelID" class="@(userLevelsList.UserLevelID.HeaderCellClass)"><div id="elh_UserLevels_UserLevelID" class="UserLevels_UserLevelID">@Html.Raw(userLevelsList.RenderFieldHeader(userLevelsList.UserLevelID))</div></th>
} @* userLevelsList.UserLevelID.Visible (end) *@
@if (userLevelsList.UserLevelName.Visible) { // userLevelsList.UserLevelName.Visible (begin)
        <th data-name="UserLevelName" class="@(userLevelsList.UserLevelName.HeaderCellClass)"><div id="elh_UserLevels_UserLevelName" class="UserLevels_UserLevelName">@Html.Raw(userLevelsList.RenderFieldHeader(userLevelsList.UserLevelName))</div></th>
} @* userLevelsList.UserLevelName.Visible (end) *@
@* Render list options (header, right) *@
@userLevelsList.ListOptions.RenderHeader("right")
    </tr>
</thead>
<tbody data-page="@(userLevelsList.PageNumber)">
@{
    await userLevelsList.SetupGrid();
    bool eof = userLevelsList.Recordset == null; // DN
}
@while (userLevelsList.RecordCount < userLevelsList.StopRecord || SameString(userLevelsList.RowIndex, "$rowindex$")) { // Begin While
    if (!eof && !SameString(userLevelsList.RowIndex, "$rowindex$") &&
        (!userLevelsList.IsGridAdd || userLevelsList.CurrentMode == "copy") &&
        (!((userLevelsList.IsCopy || userLevelsList.IsAdd) && userLevelsList.RowIndex is int rowIndex && rowIndex == 0))) // DN
        eof = !await userLevelsList.Recordset.ReadAsync();
    userLevelsList.RecordCount++;
    if (userLevelsList.RecordCount >= userLevelsList.StartRecord) {
        await userLevelsList.SetupRow();
    <tr @Html.Raw(userLevelsList.RowAttributes)>
    @* Render list options (body, left) *@
    @userLevelsList.ListOptions.RenderBody("left", userLevelsList.RowCount)
    @if (userLevelsList.UserLevelID.Visible) { // userLevelsList.UserLevelID.Visible (begin)
        <td data-name="UserLevelID" @Html.Raw(userLevelsList.UserLevelID.CellAttributes)>
<span id="el@(userLevelsList.RowIndex == "$rowindex$" ? "$rowindex$" : userLevelsList.RowCount)_UserLevels_UserLevelID" class="el_UserLevels_UserLevelID">
<span @Html.Raw(userLevelsList.UserLevelID.ViewAttributes)>
@Html.Raw(userLevelsList.UserLevelID.GetViewValue())</span>
</span>
</td>
    } @* userLevelsList.UserLevelID.Visible (end) *@
    @if (userLevelsList.UserLevelName.Visible) { // userLevelsList.UserLevelName.Visible (begin)
        <td data-name="UserLevelName" @Html.Raw(userLevelsList.UserLevelName.CellAttributes)>
<span id="el@(userLevelsList.RowIndex == "$rowindex$" ? "$rowindex$" : userLevelsList.RowCount)_UserLevels_UserLevelName" class="el_UserLevels_UserLevelName">
<span @Html.Raw(userLevelsList.UserLevelName.ViewAttributes)>
@Html.Raw(userLevelsList.UserLevelName.GetViewValue())</span>
</span>
</td>
    } @* userLevelsList.UserLevelName.Visible (end) *@
    @* Render list options (body, right) *@
    @userLevelsList.ListOptions.RenderBody("right", userLevelsList.RowCount)
    </tr>
    } @* End if *@

    // Reset for template row
    if (SameString(userLevelsList.RowIndex, "$rowindex$"))
        userLevelsList.RowIndex = 0;

    // Reset inline add/copy row
    if ((userLevelsList.IsCopy || userLevelsList.IsAdd) && userLevelsList.RowIndex is int rowIndex2 && rowIndex2 == 0)
        userLevelsList.RowIndex = 1;
} @* End While *@
</tbody>
</table><!-- /.ew-table -->
} @* End If TotalRecords > 0 *@
</div><!-- /.ew-grid-middle-panel -->
@if (Empty(userLevelsList.CurrentAction) && !userLevelsList.UseAjaxActions) {
<input type="hidden" name="action" id="action" value="">
}
</form><!-- /.ew-list-form -->
@{ userLevelsList.CloseRecordset(); }
</div><!-- /.ew-grid -->
